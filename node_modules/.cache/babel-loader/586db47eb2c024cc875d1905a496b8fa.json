{"ast":null,"code":"import _defineProperty from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from './components/Grid';\nimport { update } from './utils';\nimport './Board.css';\n\nfunction Board({\n  matrix\n}) {\n  const _useState = useState(matrix),\n        _useState2 = _slicedToArray(_useState, 2),\n        board = _useState2[0],\n        setBoard = _useState2[1];\n\n  const handleonClick = () => {\n    let indexRowActive = board && board[0].findIndex(row => row.active);\n    let indexBoardActive = 0; // const newFields = [\n    //   ...board.slice(0, 1),\n    //   board[1].merge({\n    //     [nameField]: valueField,\n    //     ebanled:true\n    //   }),\n    //   ...reportArray.slice(1 + 1)\n    // ];\n\n    const matrixUpdate = board && board.map((row, boardIndex) => {\n      return row.map((grid, gridIndex) => {\n        if (grid.active) {\n          indexRowActive = gridIndex;\n          indexBoardActive = boardIndex;\n          return _objectSpread({}, grid, {\n            active: false\n          });\n        } else if (grid.enabled) {\n          if (indexRowActive === gridIndex && boardIndex - indexBoardActive === 1) {\n            return _objectSpread({}, grid, {\n              active: true\n            });\n          } else if (gridIndex - indexRowActive === 1 && boardIndex === indexBoardActive) {\n            return _objectSpread({}, grid, {\n              active: true\n            });\n          } else {\n            return grid;\n          }\n        } else {\n          return grid;\n        }\n      });\n    });\n    console.log(matrixUpdate);\n    setBoard(matrixUpdate);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"help\",\n    onClick: handleonClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Pidele ayuda a la aguilas\"), board && board.map(row => React.createElement(\"div\", {\n    key: row,\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, row && row.map((grid, i) => React.createElement(Grid, {\n    key: i,\n    enabled: grid.enabled,\n    active: grid.active,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })))));\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(PropTypes.shape({\n    enabled: PropTypes.bool,\n    active: PropTypes.bool\n  }))\n};\nexport default Board;","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js"],"names":["React","useState","PropTypes","Grid","update","Board","matrix","board","setBoard","handleonClick","indexRowActive","findIndex","row","active","indexBoardActive","matrixUpdate","map","boardIndex","grid","gridIndex","enabled","console","log","i","propTypes","arrayOf","shape","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Grid from './components/Grid';\nimport { update } from './utils';\nimport './Board.css';\n\nfunction Board({ matrix }) {\n  const [ board, setBoard ] = useState(matrix);\n  const handleonClick = () => {\n    let indexRowActive = board && board[0].findIndex(row => row.active);\n    let indexBoardActive = 0;\n    // const newFields = [\n    //   ...board.slice(0, 1),\n    //   board[1].merge({\n    //     [nameField]: valueField,\n    //     ebanled:true\n    //   }),\n    //   ...reportArray.slice(1 + 1)\n    // ];\n    const matrixUpdate = board &&\n      board.map((row, boardIndex) => {\n        return row.map((grid, gridIndex) => {\n          if (grid.active) {\n            indexRowActive = gridIndex;\n            indexBoardActive = boardIndex;\n            return { ...grid, active: false }\n          } else if (grid.enabled) {\n            if (indexRowActive === gridIndex && boardIndex - indexBoardActive === 1) {\n              return { ...grid, active: true }\n            } else if (gridIndex - indexRowActive === 1 && boardIndex === indexBoardActive) {\n              return { ...grid, active: true }\n            } else {\n              return grid;\n            }\n          } else {\n            return grid;\n          }\n        })\n      });\n    console.log(matrixUpdate)\n    setBoard(matrixUpdate)\n  };\n\n  return (\n    <div className=\"board\">\n      <button className=\"help\" onClick={handleonClick}>Pidele ayuda a la aguilas</button>\n      {board && board.map(row => (\n        <div key={row} className=\"row\">\n          {row && row.map((grid, i) =>\n            <Grid key={i} enabled={grid.enabled} active={grid.active} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(\n    PropTypes.shape({ enabled: PropTypes.bool, active: PropTypes.bool })\n  )\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}