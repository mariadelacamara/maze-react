{"ast":null,"code":"import PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport { matrix } from '../../constants';\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0,\n  lastIndexGrid: 0,\n  lastIndexRow: 0\n};\n\nconst resetPosition = (board, indexGrid, indexRow) => {\n  const boardUpdated = [...board.slice(0, indexRow), [...board[indexRow].slice(0, indexGrid), {\n    active: false,\n    enabled: true\n  }, ...board[indexRow].slice(indexGrid + 1)], ...board.slice(indexRow + 1)];\n  return boardUpdated;\n};\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case 'MOVE_DOWN':\n      {\n        const indexGrid = state.indexGrid;\n        const indexRow = state.indexRow;\n        const resetBoard = resetPosition(state.board, indexGrid, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow + 1), [...resetBoard[indexRow + 1].slice(0, indexGrid), resetBoard[indexRow + 1][indexGrid].merge({\n          active: true\n        }), ...resetBoard[indexRow + 1].slice(indexGrid + 1)], ...resetBoard.slice(indexRow + 2)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          lastIndexRow: indexRow,\n          lastIndexGrid: indexGrid,\n          indexRow: indexRow + 1,\n          indexGrid: indexGrid\n        });\n      }\n\n    case 'MOVE_RIGHT':\n      {\n        const indexGrid = state.indexGrid;\n        const indexRow = state.indexRow;\n        const resetBoard = resetPosition(state.board, indexGrid, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexGrid + 1), resetBoard[indexRow][indexGrid + 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexGrid + 2)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexGrid: indexGrid + 1,\n          lastIndexGrid: indexGrid,\n          lastIndexRow: indexRow,\n          indexRow: indexRow\n        });\n      }\n\n    case 'MOVE_UP':\n      {\n        const indexGrid = state.indexGrid;\n        const indexRow = state.indexRow;\n        const resetBoard = resetPosition(state.board, indexGrid, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow - 1), [...resetBoard[indexRow - 1].slice(0, indexGrid), resetBoard[indexRow - 1][indexGrid].merge({\n          active: true\n        }), ...resetBoard[indexRow - 1].slice(indexGrid + 1)], ...resetBoard.slice(indexRow)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: state.indexRow - 1,\n          lastIndexRow: state.indexRow,\n          indexGrid: indexGrid,\n          lastIndexGrid: indexGrid\n        });\n      }\n\n    case 'MOVE_LEFT':\n      {\n        const indexGrid = state.indexGrid;\n        const indexRow = state.indexRow;\n        const resetBoard = resetPosition(state.board, indexGrid, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexGrid - 1), resetBoard[indexRow][indexGrid - 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexGrid)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: indexRow,\n          lastIndexRow: indexRow,\n          indexGrid: indexGrid - 1,\n          lastIndexGrid: indexGrid\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport function propTypes() {\n  return {\n    board: PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['info', 'error', 'success']).isRequired,\n      title: PropTypes.string\n    })\n  };\n}","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/redux/Board/reducer.js"],"names":["PropTypes","Immutable","matrix","defaultState","moves","board","indexGrid","findIndex","elem","active","indexRow","lastIndexGrid","lastIndexRow","resetPosition","boardUpdated","slice","enabled","reducer","state","action","type","resetBoard","merge","propTypes","shape","message","string","isRequired","oneOf","title"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\n\nimport { matrix } from '../../constants';\n\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0,\n  lastIndexGrid: 0,\n  lastIndexRow: 0\n};\n\nconst resetPosition = ( board, indexGrid, indexRow ) => {\n  const boardUpdated = [\n    ...board.slice(0, indexRow),\n    [\n      ...board[indexRow].slice(0, indexGrid),\n      {\n        active: false,\n        enabled: true\n      },\n      ...board[indexRow].slice(indexGrid + 1 ),\n    ],\n    ...board.slice(indexRow + 1)\n  ];\n  return boardUpdated;\n}\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case 'MOVE_DOWN': {\n      const indexGrid = state.indexGrid;\n      const indexRow = state.indexRow;\n      const resetBoard = resetPosition(state.board, indexGrid, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow + 1),\n        [\n          ...resetBoard[indexRow + 1].slice(0, indexGrid),\n          resetBoard[indexRow + 1][indexGrid].merge({active: true}),\n          ...resetBoard[indexRow + 1].slice(indexGrid + 1 ),\n        ],\n        ...resetBoard.slice(indexRow + 2)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        lastIndexRow: indexRow,\n        lastIndexGrid: indexGrid,\n        indexRow: indexRow + 1,\n        indexGrid: indexGrid\n      });\n    }\n    case 'MOVE_RIGHT': {\n      const indexGrid = state.indexGrid;\n      const indexRow = state.indexRow;\n      const resetBoard = resetPosition(state.board, indexGrid, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexGrid + 1),\n          resetBoard[indexRow][indexGrid + 1].merge({active: true}),\n          ...resetBoard[indexRow].slice(indexGrid + 2),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexGrid: indexGrid + 1,\n        lastIndexGrid: indexGrid,\n        lastIndexRow: indexRow,\n        indexRow: indexRow\n      });\n    }\n    case 'MOVE_UP': {\n      const indexGrid = state.indexGrid;\n      const indexRow = state.indexRow;\n      const resetBoard = resetPosition(state.board, indexGrid, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow - 1),\n        [\n          ...resetBoard[indexRow - 1].slice(0, indexGrid),\n          resetBoard[indexRow - 1][indexGrid].merge({active: true}),\n\n          ...resetBoard[indexRow - 1].slice(indexGrid + 1),\n        ],\n        ...resetBoard.slice(indexRow)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: state.indexRow - 1,\n        lastIndexRow: state.indexRow,\n        indexGrid: indexGrid,\n        lastIndexGrid: indexGrid\n      });\n    }\n    case 'MOVE_LEFT': {\n      const indexGrid = state.indexGrid;\n      const indexRow = state.indexRow;\n      const resetBoard = resetPosition(state.board, indexGrid, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexGrid - 1),\n          resetBoard[indexRow][indexGrid - 1].merge({active: true}),\n\n          ...resetBoard[indexRow].slice(indexGrid),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: indexRow,\n        lastIndexRow: indexRow,\n        indexGrid: indexGrid - 1,\n        lastIndexGrid: indexGrid\n      });\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport function propTypes() {\n  return {\n    board: PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['info', 'error', 'success']).isRequired,\n      title: PropTypes.string\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}