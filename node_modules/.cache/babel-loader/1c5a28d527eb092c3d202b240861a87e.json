{"ast":null,"code":"import Immutable from 'seamless-immutable';\nexport function stringArrayToObject(actionsArray, namespace = '') {\n  if (actionsArray.some(actionName => !actionName || typeof actionName !== 'string')) {\n    throw new Error('Action names must be strings and must not be empty');\n  }\n\n  const prefix = namespace ? \"\".concat(namespace, \":\") : '';\n  return Immutable(actionsArray).asObject(actionName => [actionName, \"\".concat(prefix).concat(actionName)]);\n}\nexport const resetPosition = (board, indexSquare, indexRow) => {\n  const boardUpdated = [...board.slice(0, indexRow), [...board[indexRow].slice(0, indexSquare), {\n    active: false,\n    enabled: true\n  }, ...board[indexRow].slice(indexSquare + 1)], ...board.slice(indexRow + 1)];\n  return boardUpdated;\n};\nexport const checkFinalized = (board, indexRow, indexSquare) => board[indexRow][indexSquare + 2] === undefined;","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/redux/Board/utils.js"],"names":["Immutable","stringArrayToObject","actionsArray","namespace","some","actionName","Error","prefix","asObject","resetPosition","board","indexSquare","indexRow","boardUpdated","slice","active","enabled","checkFinalized","undefined"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AAEA,OAAO,SAASC,mBAAT,CAA6BC,YAA7B,EAA2CC,SAAS,GAAG,EAAvD,EAA2D;AAChE,MAAID,YAAY,CAACE,IAAb,CAAkBC,UAAU,IAAI,CAACA,UAAD,IAAe,OAAOA,UAAP,KAAsB,QAArE,CAAJ,EAAoF;AAClF,UAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,QAAMC,MAAM,GAAGJ,SAAS,aAAMA,SAAN,SAAqB,EAA7C;AACA,SAAOH,SAAS,CAACE,YAAD,CAAT,CAAwBM,QAAxB,CAAiCH,UAAU,IAAI,CAACA,UAAD,YAAgBE,MAAhB,SAAyBF,UAAzB,EAA/C,CAAP;AACD;AAED,OAAO,MAAMI,aAAa,GAAG,CAAEC,KAAF,EAASC,WAAT,EAAsBC,QAAtB,KAAoC;AAC/D,QAAMC,YAAY,GAAG,CACnB,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeF,QAAf,CADgB,EAEnB,CACE,GAAGF,KAAK,CAACE,QAAD,CAAL,CAAgBE,KAAhB,CAAsB,CAAtB,EAAyBH,WAAzB,CADL,EAEE;AACEI,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,OAAO,EAAE;AAFX,GAFF,EAME,GAAGN,KAAK,CAACE,QAAD,CAAL,CAAgBE,KAAhB,CAAsBH,WAAW,GAAG,CAApC,CANL,CAFmB,EAUnB,GAAGD,KAAK,CAACI,KAAN,CAAYF,QAAQ,GAAG,CAAvB,CAVgB,CAArB;AAYA,SAAOC,YAAP;AACD,CAdM;AAgBP,OAAO,MAAMI,cAAc,GAAG,CAACP,KAAD,EAAQE,QAAR,EAAkBD,WAAlB,KAAkCD,KAAK,CAACE,QAAD,CAAL,CAAgBD,WAAW,GAAG,CAA9B,MAAqCO,SAA9F","sourcesContent":["import Immutable from 'seamless-immutable';\n\nexport function stringArrayToObject(actionsArray, namespace = '') {\n  if (actionsArray.some(actionName => !actionName || typeof actionName !== 'string')) {\n    throw new Error('Action names must be strings and must not be empty');\n  }\n  const prefix = namespace ? `${namespace}:` : '';\n  return Immutable(actionsArray).asObject(actionName => [actionName, `${prefix}${actionName}`]);\n}\n\nexport const resetPosition = ( board, indexSquare, indexRow ) => {\n  const boardUpdated = [\n    ...board.slice(0, indexRow),\n    [\n      ...board[indexRow].slice(0, indexSquare),\n      {\n        active: false,\n        enabled: true\n      },\n      ...board[indexRow].slice(indexSquare + 1 ),\n    ],\n    ...board.slice(indexRow + 1)\n  ];\n  return boardUpdated;\n}\n\nexport const checkFinalized = (board, indexRow, indexSquare) => board[indexRow][indexSquare + 2] === undefined;\n"]},"metadata":{},"sourceType":"module"}