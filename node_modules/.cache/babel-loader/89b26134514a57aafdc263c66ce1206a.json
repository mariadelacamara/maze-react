{"ast":null,"code":"import _slicedToArray from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js\";\nimport React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowKeysReact from 'arrow-keys-react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from './components/Grid';\nimport { actionCreators } from '../../redux/Board/actions';\nimport './Board.css';\n\nfunction Board({\n  matrix\n}) {\n  const _useState = useState(matrix),\n        _useState2 = _slicedToArray(_useState, 2),\n        boardd = _useState2[0],\n        setBoard = _useState2[1]; // const [ gandalfIndexGrid, setGandalfIndexGrid ] = useState(board[0].findIndex(elem => elem.active));\n  // const [ gandalfIndexRow, setGandalfIndexRow ] = useState(0);\n\n\n  const dispatch = useDispatch();\n  const board = useSelector(state => state.board.board); // useEffect(() => {\n  //   ArrowKeysReact.config({\n  //     left: () => {\n  //       handleLeft();\n  //     },\n  //     right: () => {\n  //       handleRight();\n  //     },\n  //     up: () => {\n  //       handleUp();\n  //     },\n  //     down: () => {\n  //       handleDown();\n  //     }\n  //   });\n  // });\n  // const resetPositionActive = useCallback(\n  //   () => {\n  //     let action = actionCreators.move()\n  //     dispatch(action);\n  //     const boardUpdated = [\n  //       ...board.slice(0, gandalfIndexRow),\n  //       [\n  //         ...board[gandalfIndexRow].slice(0, gandalfIndexGrid),\n  //         {\n  //           active: false,\n  //           enabled: true\n  //         },\n  //         ...board[gandalfIndexRow].slice(gandalfIndexGrid + 1 ),\n  //       ],\n  //       ...board.slice(gandalfIndexRow + 1)\n  //     ];\n  //     return boardUpdated;\n  //   }\n  // ,[board, gandalfIndexRow, gandalfIndexGrid]);\n  // const handleDown = useCallback(\n  //   () => {\n  //     if (board[gandalfIndexRow + 1][gandalfIndexGrid].enabled) {\n  //       const resetBoard = resetPositionActive();\n  //       const boardUpdated = [\n  //         ...resetBoard.slice(0, gandalfIndexRow + 1),\n  //         [\n  //           ...resetBoard[gandalfIndexRow + 1].slice(0, gandalfIndexGrid),\n  //           {\n  //             active: true,\n  //             enabled: true\n  //           },\n  //           ...resetBoard[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1 ),\n  //         ],\n  //         ...resetBoard.slice(gandalfIndexRow + 2)\n  //       ];\n  //       setGandalfIndexRow(gandalfIndexRow + 1);\n  //       setBoard(boardUpdated);\n  //     }\n  //   }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  // );\n  // const handleRight = useCallback(\n  //   () => {\n  //     if (board[gandalfIndexRow][gandalfIndexGrid + 1].enabled) {\n  //       const resetBoard = resetPositionActive();\n  //       const boardUpdated = [\n  //         ...resetBoard.slice(0, gandalfIndexRow),\n  //         [\n  //           ...resetBoard[gandalfIndexRow].slice(0, gandalfIndexGrid + 1),\n  //           {\n  //             active: true,\n  //             enabled: true\n  //           },\n  //           ...resetBoard[gandalfIndexRow].slice(gandalfIndexGrid + 2),\n  //         ],\n  //         ...resetBoard.slice(gandalfIndexRow + 1)\n  //       ];\n  //       setGandalfIndexGrid(gandalfIndexGrid + 1);\n  //       setGandalfIndexRow(gandalfIndexRow);\n  //       setBoard(boardUpdated);\n  //     }\n  //   }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  // );\n  // const handleUp = useCallback(\n  //   () => {\n  //     if (board[gandalfIndexRow - 1][gandalfIndexGrid].enabled) {\n  //       const resetBoard = resetPositionActive();\n  //       const boardUpdated = [\n  //         ...resetBoard.slice(0, gandalfIndexRow - 1),\n  //         [\n  //           ...resetBoard[gandalfIndexRow - 1].slice(0, gandalfIndexGrid),\n  //           {\n  //             active: true,\n  //             enabled: true\n  //           },\n  //           ...resetBoard[gandalfIndexRow - 1].slice(gandalfIndexGrid + 1),\n  //         ],\n  //         ...resetBoard.slice(gandalfIndexRow)\n  //       ];\n  //       setGandalfIndexRow(gandalfIndexRow - 1);\n  //       setBoard(boardUpdated);\n  //     }\n  //   }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  // );\n  // const handleLeft = useCallback(\n  //   () => {\n  //     if (gandalfIndexGrid !== 0 && board[gandalfIndexRow][gandalfIndexGrid - 1].enabled) {\n  //       const resetBoard = resetPositionActive();\n  //       const boardUpdated = [\n  //         ...resetBoard.slice(0, gandalfIndexRow),\n  //         [\n  //           ...resetBoard[gandalfIndexRow].slice(0, gandalfIndexGrid - 1),\n  //           {\n  //             active: true,\n  //             enabled: true\n  //           },\n  //           ...resetBoard[gandalfIndexRow].slice(gandalfIndexGrid),\n  //         ],\n  //         ...resetBoard.slice(gandalfIndexRow + 1)\n  //       ];\n  //       setGandalfIndexGrid(gandalfIndexGrid - 1);\n  //       setGandalfIndexRow(gandalfIndexRow);\n  //       setBoard(boardUpdated);\n  //     }\n  //   }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  // );\n\n  return React.createElement(\"div\", Object.assign({\n    className: \"board\"\n  }, ArrowKeysReact.events, {\n    tabIndex: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), board && board.map((row, i) => React.createElement(\"div\", {\n    key: i,\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, row && row.map((grid, i) => React.createElement(Grid, {\n    key: i,\n    enabled: grid.enabled,\n    active: grid.active,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  })))));\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({\n    enabled: PropTypes.bool,\n    active: PropTypes.bool\n  })))\n};\nexport default Board;","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js"],"names":["React","useState","useEffect","useCallback","PropTypes","ArrowKeysReact","useDispatch","useSelector","Grid","actionCreators","Board","matrix","boardd","setBoard","dispatch","board","state","events","map","row","i","grid","enabled","active","propTypes","arrayOf","shape","bool"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,OAAO,aAAP;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA2B;AAAA,oBACIV,QAAQ,CAACU,MAAD,CADZ;AAAA;AAAA,QACjBC,MADiB;AAAA,QACTC,QADS,kBAEzB;AACA;;;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,KAAK,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACD,KAAN,CAAYA,KAAtB,CAAzB,CALyB,CAOzf,KAA2BV,cAAc,CAACY,MAA1C;AAAkD,IAAA,QAAQ,EAAC,GAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEGF,KAAK,IAAIA,KAAK,CAACG,GAAN,CAAU,CAACC,GAAD,EAAMC,CAAN,KAClB;AAAK,IAAA,GAAG,EAAEA,CAAV;AAAa,IAAA,SAAS,EAAC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,GAAG,IAAIA,GAAG,CAACD,GAAJ,CAAQ,CAACG,IAAD,EAAOD,CAAP,KACd,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,CAAX;AAAc,IAAA,OAAO,EAAEC,IAAI,CAACC,OAA5B;AAAqC,IAAA,MAAM,EAAED,IAAI,CAACE,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,CADV,CADQ,CAFZ,CADF;AAYD;;AAEDb,KAAK,CAACc,SAAN,GAAkB;AAChBb,EAAAA,MAAM,EAAEP,SAAS,CAACqB,OAAV,CACNrB,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACsB,KAAV,CAAgB;AAAEJ,IAAAA,OAAO,EAAElB,SAAS,CAACuB,IAArB;AAA2BJ,IAAAA,MAAM,EAAEnB,SAAS,CAACuB;AAA7C,GAAhB,CAAlB,CADM;AADQ,CAAlB;AAMA,eAAejB,KAAf","sourcesContent":["import React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowKeysReact from 'arrow-keys-react';\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Grid from './components/Grid';\nimport { actionCreators } from '../../redux/Board/actions';\nimport './Board.css';\n\nfunction Board({ matrix }) {\n  const [ boardd, setBoard ] = useState(matrix);\n  // const [ gandalfIndexGrid, setGandalfIndexGrid ] = useState(board[0].findIndex(elem => elem.active));\n  // const [ gandalfIndexRow, setGandalfIndexRow ] = useState(0);\n  const dispatch = useDispatch()\n  const board = useSelector(state => state.board.board)\n\n  // useEffect(() => {\n  //   ArrowKeysReact.config({\n  //     left: () => {\n  //       handleLeft();\n  //     },\n  //     right: () => {\n  //       handleRight();\n  //     },\n  //     up: () => {\n  //       handleUp();\n  //     },\n  //     down: () => {\n  //       handleDown();\n  //     }\n  //   });\n  // });\n\n  // const resetPositionActive = useCallback(\n  //   () => {\n  //     let action = actionCreators.move()\n  //     dispatch(action);\n  //     const boardUpdated = [\n  //       ...board.slice(0, gandalfIndexRow),\n  //       [\n  //         ...board[gandalfIndexRow].slice(0, gandalfIndexGrid),\n  //         {\n  //           active: false,\n  //           enabled: true\n  //         },\n  //         ...board[gandalfIndexRow].slice(gandalfIndexGrid + 1 ),\n  //       ],\n  //       ...board.slice(gandalfIndexRow + 1)\n  //     ];\n  //     return boardUpdated;\n  //   }\n  // ,[board, gandalfIndexRow, gandalfIndexGrid]);\n\n  // const handleDown = useCallback(\n  //   () => {\n  //     if (board[gandalfIndexRow + 1][gandalfIndexGrid].enabled) {\n  //       const resetBoard = resetPositionActive();\n  //       const boardUpdated = [\n  //         ...resetBoard.slice(0, gandalfIndexRow + 1),\n  //         [\n  //           ...resetBoard[gandalfIndexRow + 1].slice(0, gandalfIndexGrid),\n  //           {\n  //             active: true,\n  //             enabled: true\n  //           },\n  //           ...resetBoard[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1 ),\n  //         ],\n  //         ...resetBoard.slice(gandalfIndexRow + 2)\n  //       ];\n  //       setGandalfIndexRow(gandalfIndexRow + 1);\n  //       setBoard(boardUpdated);\n  //     }\n  //   }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  // );\n\n  // const handleRight = useCallback(\n  //   () => {\n  //     if (board[gandalfIndexRow][gandalfIndexGrid + 1].enabled) {\n  //       const resetBoard = resetPositionActive();\n  //       const boardUpdated = [\n  //         ...resetBoard.slice(0, gandalfIndexRow),\n  //         [\n  //           ...resetBoard[gandalfIndexRow].slice(0, gandalfIndexGrid + 1),\n  //           {\n  //             active: true,\n  //             enabled: true\n  //           },\n  //           ...resetBoard[gandalfIndexRow].slice(gandalfIndexGrid + 2),\n  //         ],\n  //         ...resetBoard.slice(gandalfIndexRow + 1)\n  //       ];\n  //       setGandalfIndexGrid(gandalfIndexGrid + 1);\n  //       setGandalfIndexRow(gandalfIndexRow);\n  //       setBoard(boardUpdated);\n  //     }\n  //   }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  // );\n\n  // const handleUp = useCallback(\n  //   () => {\n  //     if (board[gandalfIndexRow - 1][gandalfIndexGrid].enabled) {\n  //       const resetBoard = resetPositionActive();\n  //       const boardUpdated = [\n  //         ...resetBoard.slice(0, gandalfIndexRow - 1),\n  //         [\n  //           ...resetBoard[gandalfIndexRow - 1].slice(0, gandalfIndexGrid),\n  //           {\n  //             active: true,\n  //             enabled: true\n  //           },\n  //           ...resetBoard[gandalfIndexRow - 1].slice(gandalfIndexGrid + 1),\n  //         ],\n  //         ...resetBoard.slice(gandalfIndexRow)\n  //       ];\n  //       setGandalfIndexRow(gandalfIndexRow - 1);\n  //       setBoard(boardUpdated);\n  //     }\n  //   }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  // );\n\n  // const handleLeft = useCallback(\n  //   () => {\n  //     if (gandalfIndexGrid !== 0 && board[gandalfIndexRow][gandalfIndexGrid - 1].enabled) {\n  //       const resetBoard = resetPositionActive();\n  //       const boardUpdated = [\n  //         ...resetBoard.slice(0, gandalfIndexRow),\n  //         [\n  //           ...resetBoard[gandalfIndexRow].slice(0, gandalfIndexGrid - 1),\n  //           {\n  //             active: true,\n  //             enabled: true\n  //           },\n  //           ...resetBoard[gandalfIndexRow].slice(gandalfIndexGrid),\n  //         ],\n  //         ...resetBoard.slice(gandalfIndexRow + 1)\n  //       ];\n  //       setGandalfIndexGrid(gandalfIndexGrid - 1);\n  //       setGandalfIndexRow(gandalfIndexRow);\n  //       setBoard(boardUpdated);\n  //     }\n  //   }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  // );\n\n  return (\n    <div className=\"board\" {...ArrowKeysReact.events} tabIndex=\"1\">\n      {/* <button className=\"help\" onClick={handleDown}>Pidele ayuda a la aguilas</button> */}\n      {board && board.map((row, i) => (\n        <div key={i} className=\"row\">\n          {row && row.map((grid, i) =>\n            <Grid key={i} enabled={grid.enabled} active={grid.active} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(\n    PropTypes.arrayOf(PropTypes.shape({ enabled: PropTypes.bool, active: PropTypes.bool }))\n  )\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}