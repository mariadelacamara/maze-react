{"ast":null,"code":"import _defineProperty from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from './components/Grid';\nimport { update } from './utils';\nimport './Board.css';\n\nfunction Board({\n  matrix\n}) {\n  const _useState = useState(matrix),\n        _useState2 = _slicedToArray(_useState, 2),\n        board = _useState2[0],\n        setBoard = _useState2[1];\n\n  const handleonClick = () => {\n    let indexRowActive;\n    let indexBoardActive;\n    let active;\n    const matrixUpdate = board && board.map((row, boardIndex) => {\n      return row.array.forEach((grid, gridIndex) => {\n        if (grid.active) {\n          indexRowActive = gridIndex;\n          indexBoardActive = boardIndex;\n          return _objectSpread({}, grid, {\n            active: false\n          });\n        } else if (grid.enabled) {\n          if (indexRowActive === gridIndex && boardIndex - indexBoardActive === 1) {\n            active = true;\n            return _objectSpread({}, grid, {\n              active: true\n            });\n          } else if (gridIndex - indexRowActive === 1 && boardIndex === indexBoardActive) {\n            active = true;\n            return _objectSpread({}, grid, {\n              active: true\n            });\n          } else if (gridIndex < indexRowActive && boardIndex < indexBoardActive) {\n            active = true;\n            return _objectSpread({}, grid, {\n              active: true\n            });\n          } else {\n            return grid;\n          }\n        } else {\n          return grid;\n        }\n      }); // ((grid, gridIndex) => {\n      //   if (grid.active) {\n      //     indexRowActive = gridIndex;\n      //     indexBoardActive = boardIndex;\n      //     return { ...grid, active: false }\n      //   } else if (grid.enabled) {\n      //     if (indexRowActive === gridIndex && boardIndex - indexBoardActive === 1) {\n      //       active = true;\n      //       return { ...grid, active: true }\n      //     } else if (gridIndex - indexRowActive === 1 && boardIndex === indexBoardActive) {\n      //       active = true;\n      //       return { ...grid, active: true }\n      //     } else if (gridIndex < indexRowActive && boardIndex < indexBoardActive) {\n      //       active = true;\n      //       return { ...grid, active: true }\n      //     } else {\n      //       return grid;\n      //     }\n      //   } else {\n      //     return grid;\n      //   }\n      // })\n    });\n    console.log(matrixUpdate);\n    setBoard(matrixUpdate);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"help\",\n    onClick: handleonClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Pidele ayuda a la aguilas\"), board && board.map(row => React.createElement(\"div\", {\n    key: row,\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, row && row.map((grid, i) => React.createElement(Grid, {\n    key: i,\n    enabled: grid.enabled,\n    active: grid.active,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })))));\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(PropTypes.shape({\n    enabled: PropTypes.bool,\n    active: PropTypes.bool\n  }))\n};\nexport default Board;","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js"],"names":["React","useState","PropTypes","Grid","update","Board","matrix","board","setBoard","handleonClick","indexRowActive","indexBoardActive","active","matrixUpdate","map","row","boardIndex","array","forEach","grid","gridIndex","enabled","console","log","i","propTypes","arrayOf","shape","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Grid from './components/Grid';\nimport { update } from './utils';\nimport './Board.css';\n\nfunction Board({ matrix }) {\n  const [ board, setBoard ] = useState(matrix);\n  const handleonClick = () => {\n    let indexRowActive;\n    let indexBoardActive;\n    let active;\n    const matrixUpdate = board &&\n      board.map((row, boardIndex) => {\n        return row.array.forEach((grid, gridIndex) => {\n          if (grid.active) {\n            indexRowActive = gridIndex;\n            indexBoardActive = boardIndex;\n            return { ...grid, active: false }\n          } else if (grid.enabled) {\n            if (indexRowActive === gridIndex && boardIndex - indexBoardActive === 1) {\n              active = true;\n              return { ...grid, active: true }\n            } else if (gridIndex - indexRowActive === 1 && boardIndex === indexBoardActive) {\n              active = true;\n              return { ...grid, active: true }\n            } else if (gridIndex < indexRowActive && boardIndex < indexBoardActive) {\n              active = true;\n              return { ...grid, active: true }\n            } else {\n              return grid;\n            }\n          } else {\n            return grid;\n          }\n        });\n        // ((grid, gridIndex) => {\n        //   if (grid.active) {\n        //     indexRowActive = gridIndex;\n        //     indexBoardActive = boardIndex;\n        //     return { ...grid, active: false }\n        //   } else if (grid.enabled) {\n        //     if (indexRowActive === gridIndex && boardIndex - indexBoardActive === 1) {\n        //       active = true;\n        //       return { ...grid, active: true }\n        //     } else if (gridIndex - indexRowActive === 1 && boardIndex === indexBoardActive) {\n        //       active = true;\n        //       return { ...grid, active: true }\n        //     } else if (gridIndex < indexRowActive && boardIndex < indexBoardActive) {\n        //       active = true;\n        //       return { ...grid, active: true }\n        //     } else {\n        //       return grid;\n        //     }\n        //   } else {\n        //     return grid;\n        //   }\n        // })\n      });\n    console.log(matrixUpdate)\n    setBoard(matrixUpdate)\n  };\n\n  return (\n    <div className=\"board\">\n      <button className=\"help\" onClick={handleonClick}>Pidele ayuda a la aguilas</button>\n      {board && board.map(row => (\n        <div key={row} className=\"row\">\n          {row && row.map((grid, i) =>\n            <Grid key={i} enabled={grid.enabled} active={grid.active} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(\n    PropTypes.shape({ enabled: PropTypes.bool, active: PropTypes.bool })\n  )\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}