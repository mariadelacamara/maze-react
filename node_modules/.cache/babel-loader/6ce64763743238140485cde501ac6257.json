{"ast":null,"code":"import Immutable from 'seamless-immutable';\nimport { matrix } from '../../constants';\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0,\n  finalized: false\n};\n\nconst resetPosition = (board, indexGrid, indexRow) => {\n  const boardUpdated = [...board.slice(0, indexRow), [...board[indexRow].slice(0, indexGrid), {\n    active: false,\n    enabled: true\n  }, ...board[indexRow].slice(indexGrid + 1)], ...board.slice(indexRow + 1)];\n  return boardUpdated;\n};\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case 'MOVE_DOWN':\n      {\n        const indexGrid = state.indexGrid,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexGrid, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow + 1), [...resetBoard[indexRow + 1].slice(0, indexGrid), resetBoard[indexRow + 1][indexGrid].merge({\n          active: true\n        }), ...resetBoard[indexRow + 1].slice(indexGrid + 1)], ...resetBoard.slice(indexRow + 2)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: indexRow + 1,\n          indexGrid: indexGrid,\n          position: 'DOWN',\n          finalized: board[indexRow][indexGrid + 2] === undefined\n        });\n      }\n\n    case 'MOVE_RIGHT':\n      {\n        const indexGrid = state.indexGrid,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexGrid, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexGrid + 1), resetBoard[indexRow][indexGrid + 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexGrid + 2)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexGrid: indexGrid + 1,\n          indexRow: indexRow,\n          position: 'RIGHT',\n          finalized: board[indexRow][indexGrid + 2] === undefined\n        });\n      }\n\n    case 'MOVE_UP':\n      {\n        const indexGrid = state.indexGrid,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexGrid, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow - 1), [...resetBoard[indexRow - 1].slice(0, indexGrid), resetBoard[indexRow - 1][indexGrid].merge({\n          active: true\n        }), ...resetBoard[indexRow - 1].slice(indexGrid + 1)], ...resetBoard.slice(indexRow)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: state.indexRow - 1,\n          indexGrid: indexGrid,\n          position: 'UP',\n          finalized: board[indexRow][indexGrid + 1] === undefined\n        });\n      }\n\n    case 'MOVE_LEFT':\n      {\n        const indexGrid = state.indexGrid,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexGrid, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexGrid - 1), resetBoard[indexRow][indexGrid - 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexGrid)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: indexRow,\n          indexGrid: indexGrid - 1,\n          position: 'LEFT',\n          finalized: board[indexRow][indexGrid + 2] === undefined\n        });\n      }\n\n    case 'RESET':\n      {\n        alert.success(\"Muy bien gracias a la ayuda de las agilas Gandalf El Blanco puedo escapar !\");\n        return state.merge({\n          indexGrid: 0,\n          indexRow: 0,\n          board: matrix\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/redux/Board/reducer.js"],"names":["Immutable","matrix","defaultState","moves","board","indexGrid","findIndex","elem","active","indexRow","finalized","resetPosition","boardUpdated","slice","enabled","reducer","state","action","type","resetBoard","merge","position","undefined","alert","success"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AAEA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,KAAK,EAAEH,MAFY;AAGnBI,EAAAA,SAAS,EAAEJ,MAAM,CAAC,CAAD,CAAN,CAAUK,SAAV,CAAoBC,IAAI,IAAIA,IAAI,CAACC,MAAjC,CAHQ;AAInBC,EAAAA,QAAQ,EAAE,CAJS;AAKnBC,EAAAA,SAAS,EAAE;AALQ,CAArB;;AAQA,MAAMC,aAAa,GAAG,CAAEP,KAAF,EAASC,SAAT,EAAoBI,QAApB,KAAkC;AACtD,QAAMG,YAAY,GAAG,CACnB,GAAGR,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeJ,QAAf,CADgB,EAEnB,CACE,GAAGL,KAAK,CAACK,QAAD,CAAL,CAAgBI,KAAhB,CAAsB,CAAtB,EAAyBR,SAAzB,CADL,EAEE;AACEG,IAAAA,MAAM,EAAE,KADV;AAEEM,IAAAA,OAAO,EAAE;AAFX,GAFF,EAME,GAAGV,KAAK,CAACK,QAAD,CAAL,CAAgBI,KAAhB,CAAsBR,SAAS,GAAG,CAAlC,CANL,CAFmB,EAUnB,GAAGD,KAAK,CAACS,KAAN,CAAYJ,QAAQ,GAAG,CAAvB,CAVgB,CAArB;AAYA,SAAOG,YAAP;AACD,CAdD;;AAgBA,OAAO,SAASG,OAAT,CAAiBC,KAAK,GAAGhB,SAAS,CAACE,YAAD,CAAlC,EAAkDe,MAAlD,EAA0D;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AAAkB;AAAA,cACRb,SADQ,GACuBW,KADvB,CACRX,SADQ;AAAA,cACGI,QADH,GACuBO,KADvB,CACGP,QADH;AAAA,cACaL,KADb,GACuBY,KADvB,CACaZ,KADb;AAEhB,cAAMe,UAAU,GAAGR,aAAa,CAACP,KAAD,EAAQC,SAAR,EAAmBI,QAAnB,CAAhC;AACA,cAAMG,YAAY,GAAG,CACnB,GAAGO,UAAU,CAACN,KAAX,CAAiB,CAAjB,EAAoBJ,QAAQ,GAAG,CAA/B,CADgB,EAEnB,CACE,GAAGU,UAAU,CAACV,QAAQ,GAAG,CAAZ,CAAV,CAAyBI,KAAzB,CAA+B,CAA/B,EAAkCR,SAAlC,CADL,EAEEc,UAAU,CAACV,QAAQ,GAAG,CAAZ,CAAV,CAAyBJ,SAAzB,EAAoCe,KAApC,CAA0C;AAACZ,UAAAA,MAAM,EAAE;AAAT,SAA1C,CAFF,EAGE,GAAGW,UAAU,CAACV,QAAQ,GAAG,CAAZ,CAAV,CAAyBI,KAAzB,CAA+BR,SAAS,GAAG,CAA3C,CAHL,CAFmB,EAOnB,GAAGc,UAAU,CAACN,KAAX,CAAiBJ,QAAQ,GAAG,CAA5B,CAPgB,CAArB;AASA,eAAOO,KAAK,CAACI,KAAN,CAAY;AACjBjB,UAAAA,KAAK,EAAEa,KAAK,CAACb,KAAN,GAAc,CADJ;AAEjBC,UAAAA,KAAK,EAAEQ,YAFU;AAGjBH,UAAAA,QAAQ,EAAEA,QAAQ,GAAG,CAHJ;AAIjBJ,UAAAA,SAAS,EAAEA,SAJM;AAKjBgB,UAAAA,QAAQ,EAAE,MALO;AAMjBX,UAAAA,SAAS,EAAEN,KAAK,CAACK,QAAD,CAAL,CAAgBJ,SAAS,GAAG,CAA5B,MAAmCiB;AAN7B,SAAZ,CAAP;AAQD;;AACD,SAAK,YAAL;AAAmB;AAAA,cACTjB,SADS,GACsBW,KADtB,CACTX,SADS;AAAA,cACEI,QADF,GACsBO,KADtB,CACEP,QADF;AAAA,cACYL,KADZ,GACsBY,KADtB,CACYZ,KADZ;AAEjB,cAAMe,UAAU,GAAGR,aAAa,CAACP,KAAD,EAAQC,SAAR,EAAmBI,QAAnB,CAAhC;AACA,cAAMG,YAAY,GAAG,CACnB,GAAGO,UAAU,CAACN,KAAX,CAAiB,CAAjB,EAAoBJ,QAApB,CADgB,EAEnB,CACE,GAAGU,UAAU,CAACV,QAAD,CAAV,CAAqBI,KAArB,CAA2B,CAA3B,EAA8BR,SAAS,GAAG,CAA1C,CADL,EAEEc,UAAU,CAACV,QAAD,CAAV,CAAqBJ,SAAS,GAAG,CAAjC,EAAoCe,KAApC,CAA0C;AAACZ,UAAAA,MAAM,EAAE;AAAT,SAA1C,CAFF,EAGE,GAAGW,UAAU,CAACV,QAAD,CAAV,CAAqBI,KAArB,CAA2BR,SAAS,GAAG,CAAvC,CAHL,CAFmB,EAOnB,GAAGc,UAAU,CAACN,KAAX,CAAiBJ,QAAQ,GAAG,CAA5B,CAPgB,CAArB;AASA,eAAOO,KAAK,CAACI,KAAN,CAAY;AACjBjB,UAAAA,KAAK,EAAEa,KAAK,CAACb,KAAN,GAAc,CADJ;AAEjBC,UAAAA,KAAK,EAAEQ,YAFU;AAGjBP,UAAAA,SAAS,EAAEA,SAAS,GAAG,CAHN;AAIjBI,UAAAA,QAAQ,EAAEA,QAJO;AAKjBY,UAAAA,QAAQ,EAAE,OALO;AAMjBX,UAAAA,SAAS,EAAEN,KAAK,CAACK,QAAD,CAAL,CAAgBJ,SAAS,GAAG,CAA5B,MAAmCiB;AAN7B,SAAZ,CAAP;AAQD;;AACD,SAAK,SAAL;AAAgB;AAAA,cACNjB,SADM,GACyBW,KADzB,CACNX,SADM;AAAA,cACKI,QADL,GACyBO,KADzB,CACKP,QADL;AAAA,cACeL,KADf,GACyBY,KADzB,CACeZ,KADf;AAEd,cAAMe,UAAU,GAAGR,aAAa,CAACP,KAAD,EAAQC,SAAR,EAAmBI,QAAnB,CAAhC;AACA,cAAMG,YAAY,GAAG,CACnB,GAAGO,UAAU,CAACN,KAAX,CAAiB,CAAjB,EAAoBJ,QAAQ,GAAG,CAA/B,CADgB,EAEnB,CACE,GAAGU,UAAU,CAACV,QAAQ,GAAG,CAAZ,CAAV,CAAyBI,KAAzB,CAA+B,CAA/B,EAAkCR,SAAlC,CADL,EAEEc,UAAU,CAACV,QAAQ,GAAG,CAAZ,CAAV,CAAyBJ,SAAzB,EAAoCe,KAApC,CAA0C;AAACZ,UAAAA,MAAM,EAAE;AAAT,SAA1C,CAFF,EAIE,GAAGW,UAAU,CAACV,QAAQ,GAAG,CAAZ,CAAV,CAAyBI,KAAzB,CAA+BR,SAAS,GAAG,CAA3C,CAJL,CAFmB,EAQnB,GAAGc,UAAU,CAACN,KAAX,CAAiBJ,QAAjB,CARgB,CAArB;AAUA,eAAOO,KAAK,CAACI,KAAN,CAAY;AACjBjB,UAAAA,KAAK,EAAEa,KAAK,CAACb,KAAN,GAAc,CADJ;AAEjBC,UAAAA,KAAK,EAAEQ,YAFU;AAGjBH,UAAAA,QAAQ,EAAEO,KAAK,CAACP,QAAN,GAAiB,CAHV;AAIjBJ,UAAAA,SAAS,EAAEA,SAJM;AAKjBgB,UAAAA,QAAQ,EAAE,IALO;AAMjBX,UAAAA,SAAS,EAAEN,KAAK,CAACK,QAAD,CAAL,CAAgBJ,SAAS,GAAG,CAA5B,MAAmCiB;AAN7B,SAAZ,CAAP;AAQD;;AACD,SAAK,WAAL;AAAkB;AAAA,cACRjB,SADQ,GACuBW,KADvB,CACRX,SADQ;AAAA,cACGI,QADH,GACuBO,KADvB,CACGP,QADH;AAAA,cACaL,KADb,GACuBY,KADvB,CACaZ,KADb;AAEhB,cAAMe,UAAU,GAAGR,aAAa,CAACP,KAAD,EAAQC,SAAR,EAAmBI,QAAnB,CAAhC;AACA,cAAMG,YAAY,GAAG,CACnB,GAAGO,UAAU,CAACN,KAAX,CAAiB,CAAjB,EAAoBJ,QAApB,CADgB,EAEnB,CACE,GAAGU,UAAU,CAACV,QAAD,CAAV,CAAqBI,KAArB,CAA2B,CAA3B,EAA8BR,SAAS,GAAG,CAA1C,CADL,EAEEc,UAAU,CAACV,QAAD,CAAV,CAAqBJ,SAAS,GAAG,CAAjC,EAAoCe,KAApC,CAA0C;AAACZ,UAAAA,MAAM,EAAE;AAAT,SAA1C,CAFF,EAIE,GAAGW,UAAU,CAACV,QAAD,CAAV,CAAqBI,KAArB,CAA2BR,SAA3B,CAJL,CAFmB,EAQnB,GAAGc,UAAU,CAACN,KAAX,CAAiBJ,QAAQ,GAAG,CAA5B,CARgB,CAArB;AAUA,eAAOO,KAAK,CAACI,KAAN,CAAY;AACjBjB,UAAAA,KAAK,EAAEa,KAAK,CAACb,KAAN,GAAc,CADJ;AAEjBC,UAAAA,KAAK,EAAEQ,YAFU;AAGjBH,UAAAA,QAAQ,EAAEA,QAHO;AAIjBJ,UAAAA,SAAS,EAAEA,SAAS,GAAG,CAJN;AAKjBgB,UAAAA,QAAQ,EAAE,MALO;AAMjBX,UAAAA,SAAS,EAAEN,KAAK,CAACK,QAAD,CAAL,CAAgBJ,SAAS,GAAG,CAA5B,MAAmCiB;AAN7B,SAAZ,CAAP;AAQD;;AACD,SAAK,OAAL;AAAc;AACZC,QAAAA,KAAK,CAACC,OAAN,CAAc,6EAAd;AACA,eAAOR,KAAK,CAACI,KAAN,CAAY;AACjBf,UAAAA,SAAS,EAAE,CADM;AAEjBI,UAAAA,QAAQ,EAAE,CAFO;AAGjBL,UAAAA,KAAK,EAAEH;AAHU,SAAZ,CAAP;AAKD;;AACD;AAAS;AACP,eAAOe,KAAP;AACD;AAjGH;AAmGD","sourcesContent":["import Immutable from 'seamless-immutable';\n\nimport { matrix } from '../../constants';\n\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0,\n  finalized: false\n};\n\nconst resetPosition = ( board, indexGrid, indexRow ) => {\n  const boardUpdated = [\n    ...board.slice(0, indexRow),\n    [\n      ...board[indexRow].slice(0, indexGrid),\n      {\n        active: false,\n        enabled: true\n      },\n      ...board[indexRow].slice(indexGrid + 1 ),\n    ],\n    ...board.slice(indexRow + 1)\n  ];\n  return boardUpdated;\n}\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case 'MOVE_DOWN': {\n      const { indexGrid, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexGrid, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow + 1),\n        [\n          ...resetBoard[indexRow + 1].slice(0, indexGrid),\n          resetBoard[indexRow + 1][indexGrid].merge({active: true}),\n          ...resetBoard[indexRow + 1].slice(indexGrid + 1 ),\n        ],\n        ...resetBoard.slice(indexRow + 2)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: indexRow + 1,\n        indexGrid: indexGrid,\n        position: 'DOWN',\n        finalized: board[indexRow][indexGrid + 2] === undefined\n      });\n    }\n    case 'MOVE_RIGHT': {\n      const { indexGrid, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexGrid, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexGrid + 1),\n          resetBoard[indexRow][indexGrid + 1].merge({active: true}),\n          ...resetBoard[indexRow].slice(indexGrid + 2),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexGrid: indexGrid + 1,\n        indexRow: indexRow,\n        position: 'RIGHT',\n        finalized: board[indexRow][indexGrid + 2] === undefined\n      });\n    }\n    case 'MOVE_UP': {\n      const { indexGrid, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexGrid, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow - 1),\n        [\n          ...resetBoard[indexRow - 1].slice(0, indexGrid),\n          resetBoard[indexRow - 1][indexGrid].merge({active: true}),\n\n          ...resetBoard[indexRow - 1].slice(indexGrid + 1),\n        ],\n        ...resetBoard.slice(indexRow)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: state.indexRow - 1,\n        indexGrid: indexGrid,\n        position: 'UP',\n        finalized: board[indexRow][indexGrid + 1] === undefined\n      });\n    }\n    case 'MOVE_LEFT': {\n      const { indexGrid, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexGrid, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexGrid - 1),\n          resetBoard[indexRow][indexGrid - 1].merge({active: true}),\n\n          ...resetBoard[indexRow].slice(indexGrid),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: indexRow,\n        indexGrid: indexGrid - 1,\n        position: 'LEFT',\n        finalized: board[indexRow][indexGrid + 2] === undefined\n      });\n    }\n    case 'RESET': {\n      alert.success(\"Muy bien gracias a la ayuda de las agilas Gandalf El Blanco puedo escapar !\");\n      return state.merge({\n        indexGrid: 0,\n        indexRow: 0,\n        board: matrix\n      })\n    }\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}