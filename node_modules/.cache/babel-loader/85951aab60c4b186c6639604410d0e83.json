{"ast":null,"code":"import Immutable from 'seamless-immutable';\nimport { actions } from './actions';\nimport { matrix } from '../../constants';\nimport { resetPosition } from './utils';\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexSquare: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0,\n  finalized: false\n};\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case actions.MOVE_DOWN:\n      {\n        const indexSquare = state.indexSquare,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexSquare, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow + 1), [...resetBoard[indexRow + 1].slice(0, indexSquare), resetBoard[indexRow + 1][indexSquare].merge({\n          active: true\n        }), ...resetBoard[indexRow + 1].slice(indexSquare + 1)], ...resetBoard.slice(indexRow + 2)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: indexRow + 1,\n          indexSquare: indexSquare,\n          position: 'DOWN',\n          finalized: board[indexRow][indexSquare + 2] === undefined\n        });\n      }\n\n    case actions.MOVE_RIGHT:\n      {\n        const indexSquare = state.indexSquare,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexSquare, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexSquare + 1), resetBoard[indexRow][indexSquare + 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexSquare + 2)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexSquare: indexSquare + 1,\n          indexRow: indexRow,\n          position: 'RIGHT',\n          finalized: board[indexRow][indexSquare + 2] === undefined\n        });\n      }\n\n    case actions.MOVE_UP:\n      {\n        const indexSquare = state.indexSquare,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexSquare, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow - 1), [...resetBoard[indexRow - 1].slice(0, indexSquare), resetBoard[indexRow - 1][indexSquare].merge({\n          active: true\n        }), ...resetBoard[indexRow - 1].slice(indexSquare + 1)], ...resetBoard.slice(indexRow)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: state.indexRow - 1,\n          indexSquare: indexSquare,\n          position: 'UP',\n          finalized: board[indexRow][indexSquare + 1] === undefined\n        });\n      }\n\n    case actions.MOVE_LEFT:\n      {\n        const indexSquare = state.indexSquare,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexSquare, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexSquare - 1), resetBoard[indexRow][indexSquare - 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexSquare)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: indexRow,\n          indexSquare: indexSquare - 1,\n          position: 'LEFT',\n          finalized: board[indexRow][indexSquare + 2] === undefined\n        });\n      }\n\n    case actions.RESET:\n      {\n        return state.merge({\n          moves: 0,\n          indexSquare: matrix[0].findIndex(elem => elem.active),\n          indexRow: 0,\n          board: matrix,\n          finalized: false\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/redux/Board/reducer.js"],"names":["Immutable","actions","matrix","resetPosition","defaultState","moves","board","indexSquare","findIndex","elem","active","indexRow","finalized","reducer","state","action","type","MOVE_DOWN","resetBoard","boardUpdated","slice","merge","position","undefined","MOVE_RIGHT","MOVE_UP","MOVE_LEFT","RESET"],"mappings":"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","sourcesContent":["import Immutable from 'seamless-immutable';\n\nimport { actions } from './actions';\nimport { matrix } from '../../constants';\nimport { resetPosition } from './utils';\n\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexSquare: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0,\n  finalized: false\n};\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case actions.MOVE_DOWN: {\n      const { indexSquare, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexSquare, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow + 1),\n        [\n          ...resetBoard[indexRow + 1].slice(0, indexSquare),\n          resetBoard[indexRow + 1][indexSquare].merge({active: true}),\n          ...resetBoard[indexRow + 1].slice(indexSquare + 1 ),\n        ],\n        ...resetBoard.slice(indexRow + 2)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: indexRow + 1,\n        indexSquare: indexSquare,\n        position: 'DOWN',\n        finalized: board[indexRow][indexSquare + 2] === undefined\n      });\n    }\n    case actions.MOVE_RIGHT: {\n      const { indexSquare, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexSquare, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexSquare + 1),\n          resetBoard[indexRow][indexSquare + 1].merge({active: true}),\n          ...resetBoard[indexRow].slice(indexSquare + 2),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexSquare: indexSquare + 1,\n        indexRow: indexRow,\n        position: 'RIGHT',\n        finalized: board[indexRow][indexSquare + 2] === undefined\n      });\n    }\n    case actions.MOVE_UP: {\n      const { indexSquare, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexSquare, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow - 1),\n        [\n          ...resetBoard[indexRow - 1].slice(0, indexSquare),\n          resetBoard[indexRow - 1][indexSquare].merge({active: true}),\n\n          ...resetBoard[indexRow - 1].slice(indexSquare + 1),\n        ],\n        ...resetBoard.slice(indexRow)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: state.indexRow - 1,\n        indexSquare: indexSquare,\n        position: 'UP',\n        finalized: board[indexRow][indexSquare + 1] === undefined\n      });\n    }\n    case actions.MOVE_LEFT: {\n      const { indexSquare, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexSquare, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexSquare - 1),\n          resetBoard[indexRow][indexSquare - 1].merge({active: true}),\n\n          ...resetBoard[indexRow].slice(indexSquare),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: indexRow,\n        indexSquare: indexSquare - 1,\n        position: 'LEFT',\n        finalized: board[indexRow][indexSquare + 2] === undefined\n      });\n    }\n    case actions.RESET: {\n      return state.merge({\n        moves: 0,\n        indexSquare: matrix[0].findIndex(elem => elem.active),\n        indexRow: 0,\n        board: matrix,\n        finalized: false\n      })\n    }\n    default: {\n      return state; \n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}