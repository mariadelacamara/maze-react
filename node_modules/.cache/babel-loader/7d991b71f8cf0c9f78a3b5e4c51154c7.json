{"ast":null,"code":"import PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport { actions } from './actions';\nimport { matrix } from '../../constants';\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0\n};\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case 'MOVE_DOWN':\n      {\n        // const resetBoard = resetPositionActive();\n        const resetBoard = state.board;\n        const indexGrid = state.indexGrid;\n        const indexRow = state.indexRow;\n        const boardUpdated = [...resetBoard.slice(0, indexRow + 1), [...resetBoard[indexRow + 1].slice(0, indexGrid), resetBoard[indexRow + 1][indexGrid].merge({\n          active: true\n        }), ...resetBoard[indexRow + 1].slice(indexGrid + 1)], ...resetBoard.slice(indexRow + 2)]; // setindexRow(indexRow + 10\n\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: state.indexRow + 1\n        });\n      }\n\n    case 'MOVE_RIGHT':\n      {\n        // const resetBoard = resetPositionActive();\n        const resetBoard = state.board;\n        const indexGrid = state.indexGrid;\n        const indexRow = state.indexRow;\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexGrid + 1), resetBoard[indexRow][indexGrid + 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexGrid + 2)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: state.indexRow,\n          indexGrid: indexGrid + 1\n        });\n      }\n\n    case 'MOVE_UP':\n      {\n        // const resetBoard = resetPositionActive();\n        const resetBoard = state.board;\n        const indexGrid = state.indexGrid;\n        const indexRow = state.indexRow;\n        const boardUpdated = [...resetBoard.slice(0, indexRow - 1), [...resetBoard[indexRow - 1].slice(0, indexGrid), resetBoard[indexRow - 1][indexGrid].merge({\n          active: true\n        }), ...resetBoard[indexRow - 1].slice(indexGrid + 1)], ...resetBoard.slice(indexRow)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: state.indexRow,\n          indexGrid: indexGrid + 1\n        });\n      }\n\n    case 'MOVE_LEFT':\n      {\n        // const resetBoard = resetPositionActive();\n        const resetBoard = state.board;\n        const indexGrid = state.indexGrid;\n        const indexRow = state.indexRow;\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexGrid - 1), resetBoard[indexRow][indexGrid - 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexGrid)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: state.indexRow,\n          indexGrid: indexGrid + 1\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport function propTypes() {\n  return {\n    board: PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['info', 'error', 'success']).isRequired,\n      title: PropTypes.string\n    })\n  };\n}","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/redux/Board/reducer.js"],"names":["PropTypes","Immutable","actions","matrix","defaultState","moves","board","indexGrid","findIndex","elem","active","indexRow","reducer","state","action","type","resetBoard","boardUpdated","slice","merge","propTypes","shape","message","string","isRequired","oneOf","title"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\n\nimport { actions } from './actions';\nimport { matrix } from '../../constants';\n\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0\n};\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case 'MOVE_DOWN': {\n      // const resetBoard = resetPositionActive();\n      const resetBoard = state.board;\n      const indexGrid = state.indexGrid;\n      const indexRow = state.indexRow;\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow + 1),\n        [\n          ...resetBoard[indexRow + 1].slice(0, indexGrid),\n          resetBoard[indexRow + 1][indexGrid].merge({active: true}),\n          ...resetBoard[indexRow + 1].slice(indexGrid + 1 ),\n        ],\n        ...resetBoard.slice(indexRow + 2)\n      ];\n      // setindexRow(indexRow + 10\n      return state.merge({ moves: state.moves + 1, board: boardUpdated, indexRow: state.indexRow + 1});\n    }\n    case 'MOVE_RIGHT': {\n      // const resetBoard = resetPositionActive();\n      const resetBoard = state.board;\n      const indexGrid = state.indexGrid;\n      const indexRow = state.indexRow;\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexGrid + 1),\n          resetBoard[indexRow][indexGrid + 1].merge({active: true}),\n          ...resetBoard[indexRow].slice(indexGrid + 2),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({ moves: state.moves + 1, board: boardUpdated, indexRow: state.indexRow, indexGrid: indexGrid + 1});\n    }\n    case 'MOVE_UP': {\n      // const resetBoard = resetPositionActive();\n      const resetBoard = state.board;\n      const indexGrid = state.indexGrid;\n      const indexRow = state.indexRow;\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow - 1),\n        [\n          ...resetBoard[indexRow - 1].slice(0, indexGrid),\n          resetBoard[indexRow - 1][indexGrid].merge({active: true}),\n\n          ...resetBoard[indexRow - 1].slice(indexGrid + 1),\n        ],\n        ...resetBoard.slice(indexRow)\n      ];\n      return state.merge({ moves: state.moves + 1, board: boardUpdated, indexRow: state.indexRow, indexGrid: indexGrid + 1});\n    }\n    case 'MOVE_LEFT': {\n      // const resetBoard = resetPositionActive();\n      const resetBoard = state.board;\n      const indexGrid = state.indexGrid;\n      const indexRow = state.indexRow;\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexGrid - 1),\n          resetBoard[indexRow][indexGrid - 1].merge({active: true}),\n\n          ...resetBoard[indexRow].slice(indexGrid),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({ moves: state.moves + 1, board: boardUpdated, indexRow: state.indexRow, indexGrid: indexGrid + 1});\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport function propTypes() {\n  return {\n    board: PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['info', 'error', 'success']).isRequired,\n      title: PropTypes.string\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}