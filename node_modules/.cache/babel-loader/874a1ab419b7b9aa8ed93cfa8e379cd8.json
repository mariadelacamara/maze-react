{"ast":null,"code":"import _defineProperty from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const update = (x, y, xi, yi, matrix) => {\n  const matrixUpdate = matrix;\n  matrixUpdate[x][y].active = false;\n  matrixUpdate[xi][yi].active = true;\n  return matrixUpdate;\n};\n\nconst handleonClick = () => {\n  let indexRowActive = board && board[0].findIndex(row => row.active);\n  let indexBoardActive = 0; // const newFields = [\n  //   ...board.slice(0, 1),\n  //   board[1].merge({\n  //     [nameField]: valueField,\n  //     ebanled:true\n  //   }),\n  //   ...reportArray.slice(1 + 1)\n  // ];\n\n  const matrixUpdate = board && board.map((row, boardIndex) => {\n    return row.map((grid, gridIndex) => {\n      if (grid.active) {\n        indexRowActive = gridIndex;\n        indexBoardActive = boardIndex;\n        return _objectSpread({}, grid, {\n          active: false\n        });\n      } else if (grid.enabled) {\n        if (indexRowActive === gridIndex && boardIndex - indexBoardActive === 1) {\n          return _objectSpread({}, grid, {\n            active: true\n          });\n        } else if (gridIndex - indexRowActive === 1 && boardIndex === indexBoardActive) {\n          return _objectSpread({}, grid, {\n            active: true\n          });\n        } else {\n          return grid;\n        }\n      } else {\n        return grid;\n      }\n    });\n  });\n  console.log(matrixUpdate);\n  setBoard(matrixUpdate);\n};","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/components/Board/utils.js"],"names":["update","x","y","xi","yi","matrix","matrixUpdate","active","handleonClick","indexRowActive","board","findIndex","row","indexBoardActive","map","boardIndex","grid","gridIndex","enabled","console","log","setBoard"],"mappings":";;;;;;AAAA,OAAO,MAAMA,MAAM,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,EAAWC,EAAX,EAAeC,MAAf,KAA0B;AAC9C,QAAMC,YAAY,GAAGD,MAArB;AACAC,EAAAA,YAAY,CAACL,CAAD,CAAZ,CAAgBC,CAAhB,EAAmBK,MAAnB,GAA4B,KAA5B;AACAD,EAAAA,YAAY,CAACH,EAAD,CAAZ,CAAiBC,EAAjB,EAAqBG,MAArB,GAA8B,IAA9B;AACA,SAAOD,YAAP;AACD,CALM;;AAOP,MAAME,aAAa,GAAG,MAAM;AAC1B,MAAIC,cAAc,GAAGC,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASC,SAAT,CAAmBC,GAAG,IAAIA,GAAG,CAACL,MAA9B,CAA9B;AACA,MAAIM,gBAAgB,GAAG,CAAvB,CAF0B,CAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMP,YAAY,GAAGI,KAAK,IACxBA,KAAK,CAACI,GAAN,CAAU,CAACF,GAAD,EAAMG,UAAN,KAAqB;AAC7B,WAAOH,GAAG,CAACE,GAAJ,CAAQ,CAACE,IAAD,EAAOC,SAAP,KAAqB;AAClC,UAAID,IAAI,CAACT,MAAT,EAAiB;AACfE,QAAAA,cAAc,GAAGQ,SAAjB;AACAJ,QAAAA,gBAAgB,GAAGE,UAAnB;AACA,iCAAYC,IAAZ;AAAkBT,UAAAA,MAAM,EAAE;AAA1B;AACD,OAJD,MAIO,IAAIS,IAAI,CAACE,OAAT,EAAkB;AACvB,YAAIT,cAAc,KAAKQ,SAAnB,IAAgCF,UAAU,GAAGF,gBAAb,KAAkC,CAAtE,EAAyE;AACvE,mCAAYG,IAAZ;AAAkBT,YAAAA,MAAM,EAAE;AAA1B;AACD,SAFD,MAEO,IAAIU,SAAS,GAAGR,cAAZ,KAA+B,CAA/B,IAAoCM,UAAU,KAAKF,gBAAvD,EAAyE;AAC9E,mCAAYG,IAAZ;AAAkBT,YAAAA,MAAM,EAAE;AAA1B;AACD,SAFM,MAEA;AACL,iBAAOS,IAAP;AACD;AACF,OARM,MAQA;AACL,eAAOA,IAAP;AACD;AACF,KAhBM,CAAP;AAiBD,GAlBD,CADF;AAoBAG,EAAAA,OAAO,CAACC,GAAR,CAAYd,YAAZ;AACAe,EAAAA,QAAQ,CAACf,YAAD,CAAR;AACD,CAjCD","sourcesContent":["export const update = (x, y, xi, yi, matrix) => {\n  const matrixUpdate = matrix;\n  matrixUpdate[x][y].active = false;\n  matrixUpdate[xi][yi].active = true;\n  return matrixUpdate;\n}\n\nconst handleonClick = () => {\n  let indexRowActive = board && board[0].findIndex(row => row.active);\n  let indexBoardActive = 0;\n  // const newFields = [\n  //   ...board.slice(0, 1),\n  //   board[1].merge({\n  //     [nameField]: valueField,\n  //     ebanled:true\n  //   }),\n  //   ...reportArray.slice(1 + 1)\n  // ];\n  const matrixUpdate = board &&\n    board.map((row, boardIndex) => {\n      return row.map((grid, gridIndex) => {\n        if (grid.active) {\n          indexRowActive = gridIndex;\n          indexBoardActive = boardIndex;\n          return { ...grid, active: false }\n        } else if (grid.enabled) {\n          if (indexRowActive === gridIndex && boardIndex - indexBoardActive === 1) {\n            return { ...grid, active: true }\n          } else if (gridIndex - indexRowActive === 1 && boardIndex === indexBoardActive) {\n            return { ...grid, active: true }\n          } else {\n            return grid;\n          }\n        } else {\n          return grid;\n        }\n      })\n    });\n  console.log(matrixUpdate)\n  setBoard(matrixUpdate)\n};\n"]},"metadata":{},"sourceType":"module"}