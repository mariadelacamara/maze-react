{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _externalBaseAction = require('../injections/externalBaseAction');\n\nvar _externalBaseAction2 = _interopRequireDefault(_externalBaseAction);\n\nvar _baseThunkAction = require('../injections/baseThunkAction');\n\nvar _baseThunkAction2 = _interopRequireDefault(_baseThunkAction);\n\nvar _emptyThunkAction = require('../injections/emptyThunkAction');\n\nvar _emptyThunkAction2 = _interopRequireDefault(_emptyThunkAction);\n\nvar _singleCallThunkAction = require('../injections/singleCallThunkAction');\n\nvar _singleCallThunkAction2 = _interopRequireDefault(_singleCallThunkAction);\n\nvar _composeInjections = require('../injections/composeInjections');\n\nvar _composeInjections2 = _interopRequireDefault(_composeInjections);\n\nvar _mergeInjections = require('../injections/mergeInjections');\n\nvar _mergeInjections2 = _interopRequireDefault(_mergeInjections);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ensembleInjections = function ensembleInjections(action) {\n  var base = void 0;\n\n  if (action.external) {\n    base = (0, _externalBaseAction2.default)(action);\n  } else if (!action.type) {\n    base = (0, _singleCallThunkAction2.default)(action);\n  } else {\n    base = action.target ? (0, _baseThunkAction2.default)(action) : (0, _emptyThunkAction2.default)(action);\n  }\n\n  if (!action.injections) return base;\n  var injections = action.injections.constructor === Array ? (0, _mergeInjections2.default)(action.injections) : action.injections;\n  return (0, _extends3.default)({}, base, injections);\n};\n\nvar fetchMiddleware = function fetchMiddleware(_ref) {\n  var dispatch = _ref.dispatch;\n  return function (next) {\n    return function (action) {\n      return action.service ? dispatch((0, _composeInjections2.default)(ensembleInjections(action))) : next(action);\n    };\n  };\n};\n\nexports.default = fetchMiddleware;","map":null,"metadata":{},"sourceType":"script"}