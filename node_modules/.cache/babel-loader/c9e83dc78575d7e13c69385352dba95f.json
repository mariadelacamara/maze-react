{"ast":null,"code":"import _slicedToArray from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js\";\nimport React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowKeysReact from 'arrow-keys-react';\nimport { useDispatch } from 'react-redux';\nimport Grid from './components/Grid';\nimport * as actionCreators from '../../redux/Board/actions';\nimport './Board.css';\n\nfunction Board({\n  matrix\n}) {\n  const _useState = useState(matrix),\n        _useState2 = _slicedToArray(_useState, 2),\n        board = _useState2[0],\n        setBoard = _useState2[1];\n\n  const _useState3 = useState(board[0].findIndex(elem => elem.active)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gandalfIndexGrid = _useState4[0],\n        setGandalfIndexGrid = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        gandalfIndexRow = _useState6[0],\n        setGandalfIndexRow = _useState6[1];\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    ArrowKeysReact.config({\n      left: () => {\n        handleLeft();\n      },\n      right: () => {\n        handleRight();\n      },\n      up: () => {\n        handleUp();\n      },\n      down: () => {\n        handleDown();\n      }\n    });\n  });\n  const resetPositionActive = useCallback(() => {\n    let action = actionCreators.move();\n    dispatch(action);\n    const boardUpdated = [...board.slice(0, gandalfIndexRow), [...board[gandalfIndexRow].slice(0, gandalfIndexGrid), {\n      active: false,\n      enabled: true\n    }, ...board[gandalfIndexRow].slice(gandalfIndexGrid + 1)], ...board.slice(gandalfIndexRow + 1)];\n    return boardUpdated;\n  }, [board, gandalfIndexRow, gandalfIndexGrid]);\n  const handleDown = useCallback(() => {\n    if (board[gandalfIndexRow + 1][gandalfIndexGrid].enabled) {\n      const resetBoard = resetPositionActive();\n      const boardUpdated = [...resetBoard.slice(0, gandalfIndexRow + 1), [...resetBoard[gandalfIndexRow + 1].slice(0, gandalfIndexGrid), {\n        active: true,\n        enabled: true\n      }, ...resetBoard[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1)], ...resetBoard.slice(gandalfIndexRow + 2)];\n      setGandalfIndexRow(gandalfIndexRow + 1);\n      setBoard(boardUpdated);\n    }\n  }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]);\n  const handleRight = useCallback(() => {\n    if (board[gandalfIndexRow][gandalfIndexGrid + 1].enabled) {\n      const resetBoard = resetPositionActive();\n      const boardUpdated = [...resetBoard.slice(0, gandalfIndexRow), [...resetBoard[gandalfIndexRow].slice(0, gandalfIndexGrid + 1), {\n        active: true,\n        enabled: true\n      }, ...resetBoard[gandalfIndexRow].slice(gandalfIndexGrid + 2)], ...resetBoard.slice(gandalfIndexRow + 1)];\n      setGandalfIndexGrid(gandalfIndexGrid + 1);\n      setGandalfIndexRow(gandalfIndexRow);\n      setBoard(boardUpdated);\n    }\n  }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]);\n  const handleUp = useCallback(() => {\n    if (board[gandalfIndexRow - 1][gandalfIndexGrid].enabled) {\n      const resetBoard = resetPositionActive();\n      const boardUpdated = [...resetBoard.slice(0, gandalfIndexRow - 1), [...resetBoard[gandalfIndexRow - 1].slice(0, gandalfIndexGrid), {\n        active: true,\n        enabled: true\n      }, ...resetBoard[gandalfIndexRow - 1].slice(gandalfIndexGrid + 1)], ...resetBoard.slice(gandalfIndexRow)];\n      setGandalfIndexRow(gandalfIndexRow - 1);\n      setBoard(boardUpdated);\n    }\n  }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]);\n  const handleLeft = useCallback(() => {\n    if (gandalfIndexGrid !== 0 && board[gandalfIndexRow][gandalfIndexGrid - 1].enabled) {\n      const resetBoard = resetPositionActive();\n      const boardUpdated = [...resetBoard.slice(0, gandalfIndexRow), [...resetBoard[gandalfIndexRow].slice(0, gandalfIndexGrid - 1), {\n        active: true,\n        enabled: true\n      }, ...resetBoard[gandalfIndexRow].slice(gandalfIndexGrid)], ...resetBoard.slice(gandalfIndexRow + 1)];\n      setGandalfIndexGrid(gandalfIndexGrid - 1);\n      setGandalfIndexRow(gandalfIndexRow);\n      setBoard(boardUpdated);\n    }\n  }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]);\n  return React.createElement(\"div\", Object.assign({\n    className: \"board\"\n  }, ArrowKeysReact.events, {\n    tabIndex: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), board && board.map((row, i) => React.createElement(\"div\", {\n    key: i,\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, row && row.map((grid, i) => React.createElement(Grid, {\n    key: i,\n    enabled: grid.enabled,\n    active: grid.active,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  })))));\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({\n    enabled: PropTypes.bool,\n    active: PropTypes.bool\n  })))\n};\nexport default Board;","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js"],"names":["React","useState","useEffect","useCallback","PropTypes","ArrowKeysReact","useDispatch","Grid","actionCreators","Board","matrix","board","setBoard","findIndex","elem","active","gandalfIndexGrid","setGandalfIndexGrid","gandalfIndexRow","setGandalfIndexRow","dispatch","config","left","handleLeft","right","handleRight","up","handleUp","down","handleDown","resetPositionActive","action","move","boardUpdated","slice","enabled","resetBoard","events","map","row","i","grid","propTypes","arrayOf","shape","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowKeysReact from 'arrow-keys-react';\nimport { useDispatch } from 'react-redux'\n\nimport Grid from './components/Grid';\nimport * as actionCreators from '../../redux/Board/actions';\nimport './Board.css';\n\nfunction Board({ matrix }) {\n  const [ board, setBoard ] = useState(matrix);\n  const [ gandalfIndexGrid, setGandalfIndexGrid ] = useState(board[0].findIndex(elem => elem.active));\n  const [ gandalfIndexRow, setGandalfIndexRow ] = useState(0);\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    ArrowKeysReact.config({\n      left: () => {\n        handleLeft();\n      },\n      right: () => {\n        handleRight();\n      },\n      up: () => {\n        handleUp();\n      },\n      down: () => {\n        handleDown();\n      }\n    });\n  });\n\n  const resetPositionActive = useCallback(\n    () => {\n      let action = actionCreators.move()\n      dispatch(action);\n      const boardUpdated = [\n        ...board.slice(0, gandalfIndexRow),\n        [\n          ...board[gandalfIndexRow].slice(0, gandalfIndexGrid),\n          {\n            active: false,\n            enabled: true\n          },\n          ...board[gandalfIndexRow].slice(gandalfIndexGrid + 1 ),\n        ],\n        ...board.slice(gandalfIndexRow + 1)\n      ];\n      return boardUpdated;\n    }\n  ,[board, gandalfIndexRow, gandalfIndexGrid]);\n\n  const handleDown = useCallback(\n    () => {\n      if (board[gandalfIndexRow + 1][gandalfIndexGrid].enabled) {\n        const resetBoard = resetPositionActive();\n        const boardUpdated = [\n          ...resetBoard.slice(0, gandalfIndexRow + 1),\n          [\n            ...resetBoard[gandalfIndexRow + 1].slice(0, gandalfIndexGrid),\n            {\n              active: true,\n              enabled: true\n            },\n            ...resetBoard[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1 ),\n          ],\n          ...resetBoard.slice(gandalfIndexRow + 2)\n        ];\n        setGandalfIndexRow(gandalfIndexRow + 1);\n        setBoard(boardUpdated);\n      }\n    }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  );\n\n  const handleRight = useCallback(\n    () => {\n      if (board[gandalfIndexRow][gandalfIndexGrid + 1].enabled) {\n        const resetBoard = resetPositionActive();\n        const boardUpdated = [\n          ...resetBoard.slice(0, gandalfIndexRow),\n          [\n            ...resetBoard[gandalfIndexRow].slice(0, gandalfIndexGrid + 1),\n            {\n              active: true,\n              enabled: true\n            },\n            ...resetBoard[gandalfIndexRow].slice(gandalfIndexGrid + 2),\n          ],\n          ...resetBoard.slice(gandalfIndexRow + 1)\n        ];\n        setGandalfIndexGrid(gandalfIndexGrid + 1);\n        setGandalfIndexRow(gandalfIndexRow);\n        setBoard(boardUpdated);\n      }\n    }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  );\n\n  const handleUp = useCallback(\n    () => {\n      if (board[gandalfIndexRow - 1][gandalfIndexGrid].enabled) {\n        const resetBoard = resetPositionActive();\n        const boardUpdated = [\n          ...resetBoard.slice(0, gandalfIndexRow - 1),\n          [\n            ...resetBoard[gandalfIndexRow - 1].slice(0, gandalfIndexGrid),\n            {\n              active: true,\n              enabled: true\n            },\n            ...resetBoard[gandalfIndexRow - 1].slice(gandalfIndexGrid + 1),\n          ],\n          ...resetBoard.slice(gandalfIndexRow)\n        ];\n        setGandalfIndexRow(gandalfIndexRow - 1);\n        setBoard(boardUpdated);\n      }\n    }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  );\n\n  const handleLeft = useCallback(\n    () => {\n      if (gandalfIndexGrid !== 0 && board[gandalfIndexRow][gandalfIndexGrid - 1].enabled) {\n        const resetBoard = resetPositionActive();\n        const boardUpdated = [\n          ...resetBoard.slice(0, gandalfIndexRow),\n          [\n            ...resetBoard[gandalfIndexRow].slice(0, gandalfIndexGrid - 1),\n            {\n              active: true,\n              enabled: true\n            },\n            ...resetBoard[gandalfIndexRow].slice(gandalfIndexGrid),\n          ],\n          ...resetBoard.slice(gandalfIndexRow + 1)\n        ];\n        setGandalfIndexGrid(gandalfIndexGrid - 1);\n        setGandalfIndexRow(gandalfIndexRow);\n        setBoard(boardUpdated);\n      }\n    }, [resetPositionActive, board, gandalfIndexRow, gandalfIndexGrid]\n  );\n\n\n  return (\n    <div className=\"board\" {...ArrowKeysReact.events} tabIndex=\"1\">\n      {/* <button className=\"help\" onClick={handleDown}>Pidele ayuda a la aguilas</button> */}\n      {board && board.map((row, i) => (\n        <div key={i} className=\"row\">\n          {row && row.map((grid, i) =>\n            <Grid key={i} enabled={grid.enabled} active={grid.active} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(\n    PropTypes.arrayOf(PropTypes.shape({ enabled: PropTypes.bool, active: PropTypes.bool }))\n  )\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}