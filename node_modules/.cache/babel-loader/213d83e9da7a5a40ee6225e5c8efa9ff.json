{"ast":null,"code":"import _slicedToArray from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport { actions } from './actions';\nimport matrix from '../../constants';\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: this.board[0].findIndex(elem => elem.active)\n};\n\nconst _useState = useState(board[0].findIndex(elem => elem.active)),\n      _useState2 = _slicedToArray(_useState, 2),\n      gandalfIndexGrid = _useState2[0],\n      setGandalfIndexGrid = _useState2[1];\n\nconst _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gandalfIndexRow = _useState4[0],\n      setGandalfIndexRow = _useState4[1];\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case actions.MOVE:\n      {\n        return state.merge({\n          moves: state.moves + 1\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport function propTypes() {\n  return {\n    board: PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['info', 'error', 'success']).isRequired,\n      title: PropTypes.string\n    })\n  };\n}","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/redux/Board/reducer.js"],"names":["PropTypes","Immutable","actions","matrix","defaultState","moves","board","indexGrid","findIndex","elem","active","useState","gandalfIndexGrid","setGandalfIndexGrid","gandalfIndexRow","setGandalfIndexRow","reducer","state","action","type","MOVE","merge","propTypes","shape","message","string","isRequired","oneOf","title"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,KAAK,EAAEH,MAFY;AAGnBI,EAAAA,SAAS,EAAE,KAAKD,KAAL,CAAW,CAAX,EAAcE,SAAd,CAAwBC,IAAI,IAAIA,IAAI,CAACC,MAArC;AAHQ,CAArB;;kBAMkDC,QAAQ,CAACL,KAAK,CAAC,CAAD,CAAL,CAASE,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACC,MAAhC,CAAD,C;;MAAlDE,gB;MAAkBC,mB;;mBACsBF,QAAQ,CAAC,CAAD,C;;MAAhDG,e;MAAiBC,kB;;AAEzB,OAAO,SAASC,OAAT,CAAiBC,KAAK,GAAGhB,SAAS,CAACG,YAAD,CAAlC,EAAkDc,MAAlD,EAA0D;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,OAAO,CAACkB,IAAb;AAAmB;AACjB,eAAOH,KAAK,CAACI,KAAN,CAAY;AAAEhB,UAAAA,KAAK,EAAEY,KAAK,CAACZ,KAAN,GAAc;AAAvB,SAAZ,CAAP;AACD;;AACD;AAAS;AACP,eAAOY,KAAP;AACD;AANH;AAQD;AAED,OAAO,SAASK,SAAT,GAAqB;AAC1B,SAAO;AACLhB,IAAAA,KAAK,EAAEN,SAAS,CAACuB,KAAV,CAAgB;AACrBC,MAAAA,OAAO,EAAExB,SAAS,CAACyB,MAAV,CAAiBC,UADL;AAErBP,MAAAA,IAAI,EAAEnB,SAAS,CAAC2B,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,SAAlB,CAAhB,EAA8CD,UAF/B;AAGrBE,MAAAA,KAAK,EAAE5B,SAAS,CAACyB;AAHI,KAAhB;AADF,GAAP;AAOD","sourcesContent":["import PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\n\nimport { actions } from './actions';\nimport matrix from '../../constants';\n\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: this.board[0].findIndex(elem => elem.active)\n};\n\nconst [ gandalfIndexGrid, setGandalfIndexGrid ] = useState(board[0].findIndex(elem => elem.active));\nconst [ gandalfIndexRow, setGandalfIndexRow ] = useState(0);\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case actions.MOVE: {\n      return state.merge({ moves: state.moves + 1});\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport function propTypes() {\n  return {\n    board: PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['info', 'error', 'success']).isRequired,\n      title: PropTypes.string\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}