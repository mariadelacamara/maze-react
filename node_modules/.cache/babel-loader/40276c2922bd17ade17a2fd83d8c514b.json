{"ast":null,"code":"import _toConsumableArray from\"/Users/a/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import Immutable from'seamless-immutable';export function stringArrayToObject(actionsArray){var namespace=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(actionsArray.some(function(actionName){return!actionName||typeof actionName!=='string';})){throw new Error('Action names must be strings and must not be empty');}var prefix=namespace?\"\".concat(namespace,\":\"):'';return Immutable(actionsArray).asObject(function(actionName){return[actionName,\"\".concat(prefix).concat(actionName)];});}export var resetPosition=function resetPosition(board,indexSquare,indexRow){var boardUpdated=[].concat(_toConsumableArray(board.slice(0,indexRow)),[[].concat(_toConsumableArray(board[indexRow].slice(0,indexSquare)),[{active:false,enabled:true}],_toConsumableArray(board[indexRow].slice(indexSquare+1)))],_toConsumableArray(board.slice(indexRow+1)));return boardUpdated;};export var checkFinalized=function checkFinalized(board,indexRow,indexSquare){return board[indexRow][indexSquare+1]===undefined;};","map":{"version":3,"sources":["/Users/a/Documents/Proyects/maze-react/src/redux/Board/utils.js"],"names":["Immutable","stringArrayToObject","actionsArray","namespace","some","actionName","Error","prefix","asObject","resetPosition","board","indexSquare","indexRow","boardUpdated","slice","active","enabled","checkFinalized","undefined"],"mappings":"iIAAA,MAAOA,CAAAA,SAAP,KAAsB,oBAAtB,CAEA,MAAO,SAASC,CAAAA,mBAAT,CAA6BC,YAA7B,CAA2D,IAAhBC,CAAAA,SAAgB,2DAAJ,EAAI,CAChE,GAAID,YAAY,CAACE,IAAb,CAAkB,SAAAC,UAAU,QAAI,CAACA,UAAD,EAAe,MAAOA,CAAAA,UAAP,GAAsB,QAAzC,EAA5B,CAAJ,CAAoF,CAClF,KAAM,IAAIC,CAAAA,KAAJ,CAAU,oDAAV,CAAN,CACD,CACD,GAAMC,CAAAA,MAAM,CAAGJ,SAAS,WAAMA,SAAN,MAAqB,EAA7C,CACA,MAAOH,CAAAA,SAAS,CAACE,YAAD,CAAT,CAAwBM,QAAxB,CAAiC,SAAAH,UAAU,QAAI,CAACA,UAAD,WAAgBE,MAAhB,SAAyBF,UAAzB,EAAJ,EAA3C,CAAP,CACD,CAED,MAAO,IAAMI,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAEC,KAAF,CAASC,WAAT,CAAsBC,QAAtB,CAAoC,CAC/D,GAAMC,CAAAA,YAAY,8BACbH,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAeF,QAAf,CADa,gCAGXF,KAAK,CAACE,QAAD,CAAL,CAAgBE,KAAhB,CAAsB,CAAtB,CAAyBH,WAAzB,CAHW,GAId,CACEI,MAAM,CAAE,KADV,CAEEC,OAAO,CAAE,IAFX,CAJc,qBAQXN,KAAK,CAACE,QAAD,CAAL,CAAgBE,KAAhB,CAAsBH,WAAW,CAAG,CAApC,CARW,uBAUbD,KAAK,CAACI,KAAN,CAAYF,QAAQ,CAAG,CAAvB,CAVa,EAAlB,CAYA,MAAOC,CAAAA,YAAP,CACD,CAdM,CAgBP,MAAO,IAAMI,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACP,KAAD,CAAQE,QAAR,CAAkBD,WAAlB,QAAkCD,CAAAA,KAAK,CAACE,QAAD,CAAL,CAAgBD,WAAW,CAAG,CAA9B,IAAqCO,SAAvE,EAAvB","sourcesContent":["import Immutable from 'seamless-immutable';\n\nexport function stringArrayToObject(actionsArray, namespace = '') {\n  if (actionsArray.some(actionName => !actionName || typeof actionName !== 'string')) {\n    throw new Error('Action names must be strings and must not be empty');\n  }\n  const prefix = namespace ? `${namespace}:` : '';\n  return Immutable(actionsArray).asObject(actionName => [actionName, `${prefix}${actionName}`]);\n}\n\nexport const resetPosition = ( board, indexSquare, indexRow ) => {\n  const boardUpdated = [\n    ...board.slice(0, indexRow),\n    [\n      ...board[indexRow].slice(0, indexSquare),\n      {\n        active: false,\n        enabled: true\n      },\n      ...board[indexRow].slice(indexSquare + 1 ),\n    ],\n    ...board.slice(indexRow + 1)\n  ];\n  return boardUpdated;\n}\n\nexport const checkFinalized = (board, indexRow, indexSquare) => board[indexRow][indexSquare + 1] === undefined;\n"]},"metadata":{},"sourceType":"module"}