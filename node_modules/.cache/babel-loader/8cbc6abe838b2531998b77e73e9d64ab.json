{"ast":null,"code":"import _slicedToArray from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowKeysReact from 'arrow-keys-react';\nimport Grid from './components/Grid';\nimport './Board.css';\n\nfunction Board({\n  matrix\n}) {\n  const _useState = useState(matrix),\n        _useState2 = _slicedToArray(_useState, 2),\n        board = _useState2[0],\n        setBoard = _useState2[1];\n\n  const _useState3 = useState(board[0].findIndex(elem => elem.active)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gandalfIndexGrid = _useState4[0],\n        setGandalfIndexGrid = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        gandalfIndexRow = _useState6[0],\n        setGandalfIndexRow = _useState6[1];\n\n  useEffect(() => {\n    ArrowKeysReact.config({\n      left: () => {\n        console.log('left key detected.');\n      },\n      right: () => {\n        console.log('right key detected.');\n      },\n      up: () => {\n        console.log('up key detected.');\n      },\n      down: () => {\n        handleDown();\n      }\n    });\n  }, []);\n\n  const handleDown = () => {\n    const matrixUpdated = [...board.slice(gandalfIndexRow, gandalfIndexRow + 1), board[gandalfIndexRow + 1][gandalfIndexRow] = {\n      active: true,\n      enabled: true\n    }, ...board.slice(gandalfIndexRow + 1)];\n    console.log(matrixUpdated);\n    setBoard(matrixUpdated);\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: \"board\"\n  }, ArrowKeysReact.events, {\n    tabIndex: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"help\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Pidele ayuda a la aguilas\"), board && board.map(row => React.createElement(\"div\", {\n    key: row,\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, row && row.map((grid, i) => React.createElement(Grid, {\n    key: i,\n    enabled: grid.enabled,\n    active: grid.active,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })))));\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(PropTypes.shape({\n    enabled: PropTypes.bool,\n    active: PropTypes.bool\n  }))\n};\nexport default Board;","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js"],"names":["React","useState","useEffect","PropTypes","ArrowKeysReact","Grid","Board","matrix","board","setBoard","findIndex","elem","active","gandalfIndexGrid","setGandalfIndexGrid","gandalfIndexRow","setGandalfIndexRow","config","left","console","log","right","up","down","handleDown","matrixUpdated","slice","enabled","events","map","row","grid","i","propTypes","arrayOf","shape","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowKeysReact from 'arrow-keys-react';\n\nimport Grid from './components/Grid';\nimport './Board.css';\n\nfunction Board({ matrix }) {\n  const [ board, setBoard ] = useState(matrix);\n  const [ gandalfIndexGrid, setGandalfIndexGrid ] = useState(board[0].findIndex(elem => elem.active));\n  const [ gandalfIndexRow, setGandalfIndexRow ] = useState(0);\n\n\n  useEffect(() => {\n    ArrowKeysReact.config({\n      left: () => {\n        console.log('left key detected.');\n      },\n      right: () => {\n        console.log('right key detected.');\n      },\n      up: () => {\n        console.log('up key detected.');\n      },\n      down: () => {\n        handleDown();\n      }\n    });\n  }, []);\n  \n  const handleDown = () => {\n    const matrixUpdated = [\n      ...board.slice(gandalfIndexRow, gandalfIndexRow + 1),\n      board[gandalfIndexRow + 1][gandalfIndexRow] = {\n        active: true,\n        enabled: true\n      },\n      ...board.slice(gandalfIndexRow + 1)\n    ];\n    console.log(matrixUpdated);\n    setBoard(matrixUpdated);\n  }\n\n  return (\n    <div className=\"board\" {...ArrowKeysReact.events} tabIndex=\"1\">\n      <button className=\"help\">Pidele ayuda a la aguilas</button>\n      {board && board.map(row => (\n        <div key={row} className=\"row\">\n          {row && row.map((grid, i) =>\n            <Grid key={i} enabled={grid.enabled} active={grid.active} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(\n    PropTypes.shape({ enabled: PropTypes.bool, active: PropTypes.bool })\n  )\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}