{"ast":null,"code":"import PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport { actions } from './actions';\nimport { matrix } from '../../constants';\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0\n};\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case 'MOVE_DOWN':\n      {\n        // const resetBoard = resetPositionActive();\n        const resetBoard = state.board.board;\n        const boardUpdated = [...resetBoard.slice(0, gandalfIndexRow + 1), resetBoard[state.board.indexRow + 1][state.board.indexGrid].merge({\n          active: true\n        }), // [\n        //   ...resetBoard[gandalfIndexRow + 1].slice(0, gandalfIndexGrid),\n        //   {\n        //     active: true,\n        //     enabled: true\n        //   },\n        //   ...resetBoard[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1 ),\n        // ],\n        ...resetBoard.slice(gandalfIndexRow + 2)];\n        setGandalfIndexRow(gandalfIndexRow + 1);\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport function propTypes() {\n  return {\n    board: PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['info', 'error', 'success']).isRequired,\n      title: PropTypes.string\n    })\n  };\n}","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/redux/Board/reducer.js"],"names":["PropTypes","Immutable","actions","matrix","defaultState","moves","board","indexGrid","findIndex","elem","active","indexRow","reducer","state","action","type","resetBoard","boardUpdated","slice","gandalfIndexRow","merge","setGandalfIndexRow","propTypes","shape","message","string","isRequired","oneOf","title"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,KAAK,EAAEH,MAFY;AAGnBI,EAAAA,SAAS,EAAEJ,MAAM,CAAC,CAAD,CAAN,CAAUK,SAAV,CAAoBC,IAAI,IAAIA,IAAI,CAACC,MAAjC,CAHQ;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;AAOA,OAAO,SAASC,OAAT,CAAiBC,KAAK,GAAGZ,SAAS,CAACG,YAAD,CAAlC,EAAkDU,MAAlD,EAA0D;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AAAkB;AAChB;AACA,cAAMC,UAAU,GAAGH,KAAK,CAACP,KAAN,CAAYA,KAA/B;AACA,cAAMW,YAAY,GAAG,CACnB,GAAGD,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoBC,eAAe,GAAG,CAAtC,CADgB,EAEnBH,UAAU,CAACH,KAAK,CAACP,KAAN,CAAYK,QAAZ,GAAuB,CAAxB,CAAV,CAAqCE,KAAK,CAACP,KAAN,CAAYC,SAAjD,EAA4Da,KAA5D,CAAkE;AAACV,UAAAA,MAAM,EAAE;AAAT,SAAlE,CAFmB,EAGnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAGM,UAAU,CAACE,KAAX,CAAiBC,eAAe,GAAG,CAAnC,CAXgB,CAArB;AAaAE,QAAAA,kBAAkB,CAACF,eAAe,GAAG,CAAnB,CAAlB;AACA,eAAON,KAAK,CAACO,KAAN,CAAY;AAAEf,UAAAA,KAAK,EAAEQ,KAAK,CAACR,KAAN,GAAc,CAAvB;AAA0BC,UAAAA,KAAK,EAAEW;AAAjC,SAAZ,CAAP;AACD;;AACD;AAAS;AACP,eAAOJ,KAAP;AACD;AAtBH;AAwBD;AAED,OAAO,SAASS,SAAT,GAAqB;AAC1B,SAAO;AACLhB,IAAAA,KAAK,EAAEN,SAAS,CAACuB,KAAV,CAAgB;AACrBC,MAAAA,OAAO,EAAExB,SAAS,CAACyB,MAAV,CAAiBC,UADL;AAErBX,MAAAA,IAAI,EAAEf,SAAS,CAAC2B,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,SAAlB,CAAhB,EAA8CD,UAF/B;AAGrBE,MAAAA,KAAK,EAAE5B,SAAS,CAACyB;AAHI,KAAhB;AADF,GAAP;AAOD","sourcesContent":["import PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\n\nimport { actions } from './actions';\nimport { matrix } from '../../constants';\n\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexGrid: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0\n};\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case 'MOVE_DOWN': {\n      // const resetBoard = resetPositionActive();\n      const resetBoard = state.board.board;\n      const boardUpdated = [\n        ...resetBoard.slice(0, gandalfIndexRow + 1),\n        resetBoard[state.board.indexRow + 1][state.board.indexGrid].merge({active: true}),\n        // [\n        //   ...resetBoard[gandalfIndexRow + 1].slice(0, gandalfIndexGrid),\n        //   {\n        //     active: true,\n        //     enabled: true\n        //   },\n        //   ...resetBoard[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1 ),\n        // ],\n        ...resetBoard.slice(gandalfIndexRow + 2)\n      ];\n      setGandalfIndexRow(gandalfIndexRow + 1);\n      return state.merge({ moves: state.moves + 1, board: boardUpdated});\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport function propTypes() {\n  return {\n    board: PropTypes.shape({\n      message: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['info', 'error', 'success']).isRequired,\n      title: PropTypes.string\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}