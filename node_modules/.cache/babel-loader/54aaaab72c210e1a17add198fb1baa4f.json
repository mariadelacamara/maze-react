{"ast":null,"code":"import { RIGHT, LEFT, UP, DOWN } from './constants';\nimport { actionCreators } from '../../redux/Board/actions';\nexport const updateBoard = (board, indexRow, indexSquare) => {\n  const boardUpdated = [...board.slice(0, indexRow), [...board[indexRow].slice(0, indexSquare), {\n    active: false,\n    enabled: true\n  }, ...board[indexRow].slice(indexSquare + 1)], ...board.slice(indexRow + 1)];\n  return boardUpdated;\n};\nexport const canGoRight = (board, x, y) => board[x][y + 1].enabled;\nexport const canGoLeft = (board, x, y) => board[x][y - 1].enabled;\nexport const canGoUp = (board, x, y) => x > 0 && board[x - 1][y].enabled;\nexport const canGoDown = (board, indexRow, indexSquare) => board[indexRow + 1][indexSquare].enabled;\nexport const checkMove = (board, indexRow, indexSquare, position, dispatch) => {\n  switch (position) {\n    case DOWN:\n      {\n        if (canGoDown(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(DOWN));\n          return;\n        } else if (canGoLeft(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(LEFT));\n          return;\n        } else if (canGoRight(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(RIGHT));\n          return;\n        }\n\n        return;\n      }\n\n    case RIGHT:\n      {\n        if (canGoDown(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(DOWN));\n          return;\n        } else if (canGoRight(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(RIGHT));\n          return;\n        } else if (canGoUp(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(UP));\n          return;\n        } else if (canGoLeft(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(LEFT));\n          return;\n        }\n\n        return;\n      }\n\n    case UP:\n      {\n        if (canGoUp(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(UP));\n          return;\n        } else if (canGoRight(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(RIGHT));\n          return;\n        } else if (canGoLeft(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(LEFT));\n          return;\n        } else if (canGoDown(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(DOWN));\n          return;\n        }\n\n        return;\n      }\n\n    case LEFT:\n      {\n        if (canGoLeft(board, indexRow, indexSquare) && !canGoUp(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(LEFT));\n          return;\n        } else if (canGoDown(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(DOWN));\n          return;\n        } else if (canGoUp(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(UP));\n        } else if (canGoRight(board, indexRow, indexSquare)) {\n          dispatch(actionCreators.move(RIGHT));\n          return;\n        }\n\n        return;\n      }\n\n    default:\n      {\n        return;\n      }\n  }\n};","map":{"version":3,"sources":["/Users/a/Documents/Proyects/maze-react/src/components/Board/utils.js"],"names":["RIGHT","LEFT","UP","DOWN","actionCreators","updateBoard","board","indexRow","indexSquare","boardUpdated","slice","active","enabled","canGoRight","x","y","canGoLeft","canGoUp","canGoDown","checkMove","position","dispatch","move"],"mappings":"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","sourcesContent":["import { RIGHT, LEFT, UP, DOWN } from './constants';\nimport { actionCreators } from '../../redux/Board/actions';\n\nexport const updateBoard = (board, indexRow, indexSquare) => {\n  const boardUpdated = [\n    ...board.slice(0, indexRow),\n    [\n      ...board[indexRow].slice(0, indexSquare),\n      {\n        active: false,\n        enabled: true\n      },\n      ...board[indexRow].slice(indexSquare + 1 ),\n    ],\n    ...board.slice(indexRow + 1)\n  ];\n  return boardUpdated;\n};\n\nexport const canGoRight = (board, x, y) => board[x][y + 1].enabled;\n\nexport const canGoLeft = (board, x, y) => board[x][y - 1].enabled;\n\nexport const canGoUp = (board, x, y) => x > 0 && board[x - 1][y].enabled;\n\nexport const canGoDown = (board, indexRow, indexSquare) => board[indexRow + 1][indexSquare].enabled;\n\nexport const checkMove = (board, indexRow, indexSquare, position, dispatch) => {\n  switch (position) {\n    case DOWN: {\n      if (canGoDown(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(DOWN));\n        return;\n      } else if (canGoLeft(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(LEFT));\n        return;\n      } else if (canGoRight(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(RIGHT));\n        return;\n      }\n      return;\n    }\n    case RIGHT: {\n      if (canGoDown(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(DOWN));\n        return;\n      } else if (canGoRight(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(RIGHT));\n        return;\n      } else if (canGoUp(board, indexRow, indexSquare)){\n        dispatch(actionCreators.move(UP));\n        return;\n      } else if (canGoLeft(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(LEFT));\n        return;\n      }\n      return;\n    }\n    case UP: {\n      if (canGoUp(board, indexRow, indexSquare)){\n        dispatch(actionCreators.move(UP));\n        return;\n      }  else if (canGoRight(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(RIGHT));\n        return;\n      } else if (canGoLeft(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(LEFT));\n        return;\n      } else if (canGoDown(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(DOWN));\n        return;\n      }\n      return;\n    }\n    case LEFT: {\n      if (canGoLeft(board, indexRow, indexSquare) && !canGoUp(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(LEFT));\n        return;\n      } else if (canGoDown(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(DOWN));\n        return;\n      } else if (canGoUp(board, indexRow, indexSquare)){\n        dispatch(actionCreators.move(UP));\n      } else if (canGoRight(board, indexRow, indexSquare)) {\n        dispatch(actionCreators.move(RIGHT));\n        return;\n      }\n      return;\n    }\n    default: {\n      return;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}