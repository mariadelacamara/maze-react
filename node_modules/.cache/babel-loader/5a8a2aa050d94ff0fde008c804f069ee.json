{"ast":null,"code":"import { RIGHT, LEFT, UP, DOWN } from './constants';\nexport const updateBoard = (board, indexRow, indexSquare) => {\n  const boardUpdated = [...board.slice(0, indexRow), [...board[indexRow].slice(0, indexSquare), {\n    active: false,\n    enabled: true\n  }, ...board[indexRow].slice(indexSquare + 1)], ...board.slice(indexRow + 1)];\n  return boardUpdated;\n};\nexport const canGoRight = (board, x, y) => board[x][y + 1].enabled;\nexport const canGoLeft = (board, x, y) => board[x][y - 1].enabled;\nexport const canGoUp = (board, x, y) => x > 0 && board[x - 1][y].enabled;\nexport const canGoDown = (board, indexRow, indexSquare) => board[indexRow + 1][indexSquare].enabled; // export const checkMove = (board, indexRow, indexSquare) => {\n//   switch (position) {\n//     case DOWN: {\n//       if (canGoDown(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(DOWN));\n//         return;\n//       } else if (canGoLeft(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(LEFT));\n//         return;\n//       } else if (canGoRight(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(RIGHT));\n//         return;\n//       }\n//       return;\n//     }\n//     case RIGHT: {\n//       if (canGoDown(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(DOWN));\n//         return;\n//       } else if (canGoRight(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(RIGHT));\n//         return;\n//       } else if (canGoUp(board, indexRow, indexSquare)){\n//         dispatch(actionCreators.move(UP));\n//         return;\n//       } else if (canGoLeft(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(LEFT));\n//         return;\n//       }\n//       return;\n//     }\n//     case UP: {\n//       if (canGoUp(board, indexRow, indexSquare)){\n//         dispatch(actionCreators.move(UP));\n//         return;\n//       }  else if (canGoRight(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(RIGHT));\n//         return;\n//       } else if (canGoLeft(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(LEFT));\n//         return;\n//       } else if (canGoDown(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(DOWN));\n//         return;\n//       }\n//       return;\n//     }\n//     case LEFT: {\n//       if (canGoLeft(board, indexRow, indexSquare) && !canGoUp(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(LEFT));\n//         return;\n//       } else if (canGoDown(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(DOWN));\n//         return;\n//       } else if (canGoUp(board, indexRow, indexSquare)){\n//         dispatch(actionCreators.move(UP));\n//       } else if (canGoRight(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(RIGHT));\n//         return;\n//       }\n//       return;\n//     }\n//     default: {\n//       return;\n//     }\n//   }\n// }","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/components/Board/utils.js"],"names":["RIGHT","LEFT","UP","DOWN","updateBoard","board","indexRow","indexSquare","boardUpdated","slice","active","enabled","canGoRight","x","y","canGoLeft","canGoUp","canGoDown"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,EAAtB,EAA0BC,IAA1B,QAAsC,aAAtC;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,KAAkC;AAC3D,QAAMC,YAAY,GAAG,CACnB,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeH,QAAf,CADgB,EAEnB,CACE,GAAGD,KAAK,CAACC,QAAD,CAAL,CAAgBG,KAAhB,CAAsB,CAAtB,EAAyBF,WAAzB,CADL,EAEE;AACEG,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,OAAO,EAAE;AAFX,GAFF,EAME,GAAGN,KAAK,CAACC,QAAD,CAAL,CAAgBG,KAAhB,CAAsBF,WAAW,GAAG,CAApC,CANL,CAFmB,EAUnB,GAAGF,KAAK,CAACI,KAAN,CAAYH,QAAQ,GAAG,CAAvB,CAVgB,CAArB;AAYA,SAAOE,YAAP;AACD,CAdM;AAgBP,OAAO,MAAMI,UAAU,GAAG,CAACP,KAAD,EAAQQ,CAAR,EAAWC,CAAX,KAAiBT,KAAK,CAACQ,CAAD,CAAL,CAASC,CAAC,GAAG,CAAb,EAAgBH,OAApD;AAEP,OAAO,MAAMI,SAAS,GAAG,CAACV,KAAD,EAAQQ,CAAR,EAAWC,CAAX,KAAiBT,KAAK,CAACQ,CAAD,CAAL,CAASC,CAAC,GAAG,CAAb,EAAgBH,OAAnD;AAEP,OAAO,MAAMK,OAAO,GAAG,CAACX,KAAD,EAAQQ,CAAR,EAAWC,CAAX,KAAiBD,CAAC,GAAG,CAAJ,IAASR,KAAK,CAACQ,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAb,EAAgBH,OAA1D;AAEP,OAAO,MAAMM,SAAS,GAAG,CAACZ,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,KAAkCF,KAAK,CAACC,QAAQ,GAAG,CAAZ,CAAL,CAAoBC,WAApB,EAAiCI,OAArF,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { RIGHT, LEFT, UP, DOWN } from './constants';\n\nexport const updateBoard = (board, indexRow, indexSquare) => {\n  const boardUpdated = [\n    ...board.slice(0, indexRow),\n    [\n      ...board[indexRow].slice(0, indexSquare),\n      {\n        active: false,\n        enabled: true\n      },\n      ...board[indexRow].slice(indexSquare + 1 ),\n    ],\n    ...board.slice(indexRow + 1)\n  ];\n  return boardUpdated;\n};\n\nexport const canGoRight = (board, x, y) => board[x][y + 1].enabled;\n\nexport const canGoLeft = (board, x, y) => board[x][y - 1].enabled;\n\nexport const canGoUp = (board, x, y) => x > 0 && board[x - 1][y].enabled;\n\nexport const canGoDown = (board, indexRow, indexSquare) => board[indexRow + 1][indexSquare].enabled;\n\n// export const checkMove = (board, indexRow, indexSquare) => {\n//   switch (position) {\n//     case DOWN: {\n//       if (canGoDown(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(DOWN));\n//         return;\n//       } else if (canGoLeft(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(LEFT));\n//         return;\n//       } else if (canGoRight(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(RIGHT));\n//         return;\n//       }\n//       return;\n//     }\n//     case RIGHT: {\n//       if (canGoDown(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(DOWN));\n//         return;\n//       } else if (canGoRight(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(RIGHT));\n//         return;\n//       } else if (canGoUp(board, indexRow, indexSquare)){\n//         dispatch(actionCreators.move(UP));\n//         return;\n//       } else if (canGoLeft(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(LEFT));\n//         return;\n//       }\n//       return;\n//     }\n//     case UP: {\n//       if (canGoUp(board, indexRow, indexSquare)){\n//         dispatch(actionCreators.move(UP));\n//         return;\n//       }  else if (canGoRight(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(RIGHT));\n//         return;\n//       } else if (canGoLeft(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(LEFT));\n//         return;\n//       } else if (canGoDown(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(DOWN));\n//         return;\n//       }\n//       return;\n//     }\n//     case LEFT: {\n//       if (canGoLeft(board, indexRow, indexSquare) && !canGoUp(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(LEFT));\n//         return;\n//       } else if (canGoDown(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(DOWN));\n//         return;\n//       } else if (canGoUp(board, indexRow, indexSquare)){\n//         dispatch(actionCreators.move(UP));\n//       } else if (canGoRight(board, indexRow, indexSquare)) {\n//         dispatch(actionCreators.move(RIGHT));\n//         return;\n//       }\n//       return;\n//     }\n//     default: {\n//       return;\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}