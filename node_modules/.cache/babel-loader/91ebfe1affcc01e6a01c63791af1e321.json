{"ast":null,"code":"import _slicedToArray from \"/home/nicolas/Documents/Proyects/maze-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowKeysReact from 'arrow-keys-react';\nimport Grid from './components/Grid';\nimport './Board.css';\n\nfunction Board({\n  matrix\n}) {\n  const _useState = useState(matrix, 1, 0),\n        _useState2 = _slicedToArray(_useState, 6),\n        board = _useState2[0],\n        setBoard = _useState2[1],\n        gandalfIndexGrid = _useState2[2],\n        setGandalfIndexGrid = _useState2[3],\n        gandalfIndexRow = _useState2[4],\n        setGandalfIndexRow = _useState2[5];\n\n  useEffect(() => {\n    ArrowKeysReact.config({\n      left: () => {\n        console.log('left key detected.');\n      },\n      right: () => {\n        console.log('right key detected.');\n      },\n      up: () => {\n        console.log('up key detected.');\n      },\n      down: () => {\n        const matrixUpdated = [...board.slice(gandalfIndexRow, gandalfIndexRow + 1), [...board[gandalfIndexRow + 1].slice(gandalfIndexGrid, gandalfIndexGrid + 1), {\n          active: true,\n          enabled: true\n        }, ...board[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1)], ...board.slice(gandalfIndexRow + 2)];\n        console.log(matrixUpdated);\n        setGandalfIndexRow(1);\n        setBoard(matrixUpdated);\n      }\n    });\n  }, []); // const handleDown = () => {\n  //   const matrixUpdated = [\n  //     ...board.slice(gandalfIndexRow, gandalfIndexRow + 1),\n  //     [\n  //       ...board[gandalfIndexRow + 1].slice(gandalfIndexGrid, gandalfIndexGrid + 1 ),\n  //       {\n  //         active: true,\n  //         enabled: true\n  //       },\n  //       ...board[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1 ),\n  //     ],\n  //     ...board.slice(gandalfIndexRow + 2)\n  //   ];\n  //   console.log(matrixUpdated);\n  //   setGandalfIndexRow(1);\n  //   setBoard(matrixUpdated);\n  // }\n\n  return React.createElement(\"div\", Object.assign({\n    className: \"board\"\n  }, ArrowKeysReact.events, {\n    tabIndex: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"help\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Pidele ayuda a la aguilas\"), board && board.map(row => React.createElement(\"div\", {\n    key: row,\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, row && row.map((grid, i) => React.createElement(Grid, {\n    key: i,\n    enabled: grid.enabled,\n    active: grid.active,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })))));\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(PropTypes.shape({\n    enabled: PropTypes.bool,\n    active: PropTypes.bool\n  }))\n};\nexport default Board;","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/components/Board/index.js"],"names":["React","useState","useEffect","PropTypes","ArrowKeysReact","Grid","Board","matrix","board","setBoard","gandalfIndexGrid","setGandalfIndexGrid","gandalfIndexRow","setGandalfIndexRow","config","left","console","log","right","up","down","matrixUpdated","slice","active","enabled","events","map","row","grid","i","propTypes","arrayOf","shape","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowKeysReact from 'arrow-keys-react';\n\nimport Grid from './components/Grid';\nimport './Board.css';\n\nfunction Board({ matrix }) {\n  const [ board, setBoard,  gandalfIndexGrid, setGandalfIndexGrid, gandalfIndexRow, setGandalfIndexRow ] = useState(matrix, 1, 0);\n\n\n  useEffect(() => {\n    ArrowKeysReact.config({\n      left: () => {\n        console.log('left key detected.');\n      },\n      right: () => {\n        console.log('right key detected.');\n      },\n      up: () => {\n        console.log('up key detected.');\n      },\n      down: () => {\n        const matrixUpdated = [\n          ...board.slice(gandalfIndexRow, gandalfIndexRow + 1),\n          [\n            ...board[gandalfIndexRow + 1].slice(gandalfIndexGrid, gandalfIndexGrid + 1 ),\n            {\n              active: true,\n              enabled: true\n            },\n            ...board[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1 ),\n          ],\n          ...board.slice(gandalfIndexRow + 2)\n        ];\n        console.log(matrixUpdated);\n        setGandalfIndexRow(1);\n        setBoard(matrixUpdated);\n      }\n    });\n  }, []);\n  \n  // const handleDown = () => {\n  //   const matrixUpdated = [\n  //     ...board.slice(gandalfIndexRow, gandalfIndexRow + 1),\n  //     [\n  //       ...board[gandalfIndexRow + 1].slice(gandalfIndexGrid, gandalfIndexGrid + 1 ),\n  //       {\n  //         active: true,\n  //         enabled: true\n  //       },\n  //       ...board[gandalfIndexRow + 1].slice(gandalfIndexGrid + 1 ),\n  //     ],\n  //     ...board.slice(gandalfIndexRow + 2)\n  //   ];\n  //   console.log(matrixUpdated);\n  //   setGandalfIndexRow(1);\n  //   setBoard(matrixUpdated);\n  // }\n\n  return (\n    <div className=\"board\" {...ArrowKeysReact.events} tabIndex=\"1\">\n      <button className=\"help\">Pidele ayuda a la aguilas</button>\n      {board && board.map(row => (\n        <div key={row} className=\"row\">\n          {row && row.map((grid, i) =>\n            <Grid key={i} enabled={grid.enabled} active={grid.active} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  matrix: PropTypes.arrayOf(\n    PropTypes.shape({ enabled: PropTypes.bool, active: PropTypes.bool })\n  )\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}