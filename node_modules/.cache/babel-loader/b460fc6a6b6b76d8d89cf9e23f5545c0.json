{"ast":null,"code":"import Immutable from 'seamless-immutable';\nimport { actions } from './actions';\nimport { matrix } from '../../constants';\nimport { resetPosition, checkFinalized } from './utils';\nimport { UP, DOWN, LEFT, RIGHT } from '../../components/Board/constants';\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexSquare: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0,\n  finalized: false,\n  position: DOWN\n};\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case actions.MOVE_DOWN:\n      {\n        const indexSquare = state.indexSquare,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexSquare, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow + 1), [...resetBoard[indexRow + 1].slice(0, indexSquare), resetBoard[indexRow + 1][indexSquare].merge({\n          active: true\n        }), ...resetBoard[indexRow + 1].slice(indexSquare + 1)], ...resetBoard.slice(indexRow + 2)];\n        debugger;\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: indexRow + 1,\n          indexSquare: indexSquare,\n          position: DOWN\n        });\n      }\n\n    case actions.MOVE_RIGHT:\n      {\n        const indexSquare = state.indexSquare,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexSquare, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexSquare + 1), resetBoard[indexRow][indexSquare + 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexSquare + 2)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexSquare: indexSquare + 1,\n          indexRow: indexRow,\n          position: RIGHT,\n          finalized: checkFinalized(board, indexRow, indexSquare)\n        });\n      }\n\n    case actions.MOVE_UP:\n      {\n        const indexSquare = state.indexSquare,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexSquare, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow - 1), [...resetBoard[indexRow - 1].slice(0, indexSquare), resetBoard[indexRow - 1][indexSquare].merge({\n          active: true\n        }), ...resetBoard[indexRow - 1].slice(indexSquare + 1)], ...resetBoard.slice(indexRow)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: state.indexRow - 1,\n          indexSquare: indexSquare,\n          position: UP\n        });\n      }\n\n    case actions.MOVE_LEFT:\n      {\n        const indexSquare = state.indexSquare,\n              indexRow = state.indexRow,\n              board = state.board;\n        const resetBoard = resetPosition(board, indexSquare, indexRow);\n        const boardUpdated = [...resetBoard.slice(0, indexRow), [...resetBoard[indexRow].slice(0, indexSquare - 1), resetBoard[indexRow][indexSquare - 1].merge({\n          active: true\n        }), ...resetBoard[indexRow].slice(indexSquare)], ...resetBoard.slice(indexRow + 1)];\n        return state.merge({\n          moves: state.moves + 1,\n          board: boardUpdated,\n          indexRow: indexRow,\n          indexSquare: indexSquare - 1,\n          position: LEFT,\n          finalized: checkFinalized(board, indexRow, indexSquare)\n        });\n      }\n\n    case actions.RESET:\n      {\n        return state.merge({\n          moves: 0,\n          indexSquare: matrix[0].findIndex(elem => elem.active),\n          indexRow: 0,\n          board: matrix,\n          finalized: false\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/home/nicolas/Documents/Proyects/maze-react/src/redux/Board/reducer.js"],"names":["Immutable","actions","matrix","resetPosition","checkFinalized","UP","DOWN","LEFT","RIGHT","defaultState","moves","board","indexSquare","findIndex","elem","active","indexRow","finalized","position","reducer","state","action","type","MOVE_DOWN","resetBoard","boardUpdated","slice","merge","MOVE_RIGHT","MOVE_UP","MOVE_LEFT","RESET"],"mappings":"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","sourcesContent":["import Immutable from 'seamless-immutable';\n\nimport { actions } from './actions';\nimport { matrix } from '../../constants';\nimport { resetPosition, checkFinalized } from './utils';\nimport { UP, DOWN, LEFT, RIGHT } from '../../components/Board/constants';\n\nconst defaultState = {\n  moves: 0,\n  board: matrix,\n  indexSquare: matrix[0].findIndex(elem => elem.active),\n  indexRow: 0,\n  finalized: false,\n  position: DOWN\n};\n\nexport function reducer(state = Immutable(defaultState), action) {\n  switch (action.type) {\n    case actions.MOVE_DOWN: {\n      const { indexSquare, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexSquare, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow + 1),\n        [\n          ...resetBoard[indexRow + 1].slice(0, indexSquare),\n          resetBoard[indexRow + 1][indexSquare].merge({active: true}),\n          ...resetBoard[indexRow + 1].slice(indexSquare + 1 ),\n        ],\n        ...resetBoard.slice(indexRow + 2)\n      ];\n      debugger\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: indexRow + 1,\n        indexSquare: indexSquare,\n        position: DOWN\n      });\n    }\n    case actions.MOVE_RIGHT: {\n      const { indexSquare, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexSquare, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexSquare + 1),\n          resetBoard[indexRow][indexSquare + 1].merge({active: true}),\n          ...resetBoard[indexRow].slice(indexSquare + 2),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexSquare: indexSquare + 1,\n        indexRow: indexRow,\n        position: RIGHT,\n        finalized: checkFinalized(board, indexRow, indexSquare)\n      });\n    }\n    case actions.MOVE_UP: {\n      const { indexSquare, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexSquare, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow - 1),\n        [\n          ...resetBoard[indexRow - 1].slice(0, indexSquare),\n          resetBoard[indexRow - 1][indexSquare].merge({active: true}),\n\n          ...resetBoard[indexRow - 1].slice(indexSquare + 1),\n        ],\n        ...resetBoard.slice(indexRow)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: state.indexRow - 1,\n        indexSquare: indexSquare,\n        position: UP\n      });\n    }\n    case actions.MOVE_LEFT: {\n      const { indexSquare, indexRow, board } = state;\n      const resetBoard = resetPosition(board, indexSquare, indexRow);\n      const boardUpdated = [\n        ...resetBoard.slice(0, indexRow),\n        [\n          ...resetBoard[indexRow].slice(0, indexSquare - 1),\n          resetBoard[indexRow][indexSquare - 1].merge({active: true}),\n\n          ...resetBoard[indexRow].slice(indexSquare),\n        ],\n        ...resetBoard.slice(indexRow + 1)\n      ];\n      return state.merge({\n        moves: state.moves + 1,\n        board: boardUpdated,\n        indexRow: indexRow,\n        indexSquare: indexSquare - 1,\n        position: LEFT,\n        finalized: checkFinalized(board, indexRow, indexSquare)\n      });\n    }\n    case actions.RESET: {\n      return state.merge({\n        moves: 0,\n        indexSquare: matrix[0].findIndex(elem => elem.active),\n        indexRow: 0,\n        board: matrix,\n        finalized: false\n      })\n    }\n    default: {\n      return state; \n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}