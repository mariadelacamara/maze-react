'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.createExternalActions = createExternalActions;

var _createTypes = require('../../creators/createTypes');

var _createTypes2 = _interopRequireDefault(_createTypes);

var _commonReducer = require('./commonReducer');

var _commonReducer2 = _interopRequireDefault(_commonReducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INVISIBLE_NAMESPACE = '$INVISIBLE';

var getSuperNamespace = function getSuperNamespace(actionName) {
  return actionName.slice(0, actionName.indexOf(':'));
};
var shouldBeExtended = function shouldBeExtended(action) {
  return getSuperNamespace(action.type) === INVISIBLE_NAMESPACE;
};

var getSliceName = function getSliceName(action, reducerObject) {
  var sliceName = action.type.slice(action.type.indexOf(':') + 1, action.type.indexOf('/')).replace('#', '').toLowerCase();
  (0, _keys2.default)(reducerObject).forEach(function (reducerName) {
    if (reducerName.toLowerCase() === sliceName) sliceName = reducerName;
  });
  return sliceName;
};

var formatActionName = function formatActionName(actionName) {
  return actionName.slice(actionName.indexOf('/') + 1);
};

function wrapCombineReducers(CR) {
  var invisibleReducer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _commonReducer2.default;

  function combineReducers(reducerObject) {
    return function () {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var action = arguments[1];

      if (!shouldBeExtended(action)) return CR(reducerObject)(state, action);
      var slice = getSliceName(action, reducerObject);
      return (0, _extends4.default)({}, state, (0, _defineProperty3.default)({}, slice, invisibleReducer(state[slice], (0, _extends4.default)({}, action, { type: formatActionName(action.type) }))));
    };
  }
  return combineReducers;
}

function createExternalActions(reducerName) {
  var actionNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _commonReducer.defaultActionNames;

  return (0, _createTypes2.default)(actionNames, INVISIBLE_NAMESPACE + ':#' + reducerName.toUpperCase());
}

exports.default = wrapCombineReducers;